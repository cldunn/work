	 HASHICORP VAULT
	 
	 sudo apt update && sudo apt install vault
	 
	 // VAULT_DEV_ROOT_TOKEN_ID=root vault server -dev
	 
	 vault server -dev -dev-root-token-id="dev-only-token"
	 
	// new terminal
	export VAULT_ADDR='http://127.0.0.1:8200'
	export VAULT_TOKEN="hvs.6j4cuewowBGit65rheNoceI7"
	vault status
	
	----- REDO SERVER TO GET "vault kv put ..." TO WORK ------
	# In TTY1
	VAULT_DEV_ROOT_TOKEN_ID=root vault server -dev

	# In TTY2
	export VAULT_ADDR=http://127.0.0.1:8200
	export VAULT_TOKEN=root
	
	vault kv put secret/hello foo=world excited=yes
	vault kv get secret/hello
	vault kv get -format=json | jq -r .data.data.excited   // sudo apt update // sudo apt install -y jq
	vault kv delete secret/hello
	
	** Best Practices: use files, not CLI - see command documentation
	
	*** Install jq on Ubuntu
	sudo apt update
	sudo apt install -y jq
	
Unseal server
	in root create config.hcl
		# Use the file system as storage backend
		storage "raft" {
		   path    = "./vault/data"
		   node_id = "node1"
		}

		listener "tcp" {
		   address     = "127.0.0.1:8200"
		   tls_disable = 1
		}

		api_addr = "http://127.0.0.1:8200"
		cluster_addr = "https://127.0.0.1:8201"
		disable_mlock = true
		ui = true

	make directory for data
		mkdir -p ./vault/data
		
	launch server
		nohup sh -c "vault server -config=vault-config.hcl > /root/log/vault.log 2>&1" > /root/log/nohup.log &		
	
	initialize server from new terminal
		export VAULT_ADDR=http://127.0.0.1:8200
		
		vault status // sealed status of server
		
		vault operator init > vault_init.txt // initialize server and pipe keys and root into vault_init.txt
		
		cat vault_init.txt // view keys and root
			...
			Unseal Key 1: NC4EhKYBdl2Xq+0ir27gWimY2UkPOrOlFCN2gsmEIwAL
			Unseal Key 2: yZK0i93d9FdM7YK+ObM/WwklYq1OHMIF961jy4P6Yspi
			Unseal Key 3: 6b24wsJrxLb+MooZiUyfNs0cASQu7IUPY17DaOQsQ5qB
			Unseal Key 4: pWhknAeTWLmwRpCh4kg4VGDFRRmPm9Jk87/pEoNMb1RO
			Unseal Key 5: 4fNtz+qBW61AbSFj+YD/5sIH7F88csnS4fz04gNvFqQg

			Initial Root Token: hvs.4ljZ0Mzr3TstQZEDEmQ5jU1y

		// unseal server using 3 of the 5 keys
		vault operator unseal $(grep 'Key 1:' vault_init.txt | awk '{print $NF}')
		vault operator unseal $(grep 'Key 2:' vault_init.txt | awk '{print $NF}')
		vault operator unseal $(grep 'Key 3:' vault_init.txt | awk '{print $NF}')
		
		// login to vault using root
		vault login $(grep 'Initial Root Token:' vault_init.txt | awk '{print $NF}')
	
Use Vault via API
	tee config.hcl <<EOF
	storage "file" {
	  path = "vault-data"
	}

	listener "tcp" {
	  tls_disable = "true"
	}
	EOF
	
	vault server -config=config.hcl
	
	// get <keys_base64> and <root_token>
	curl \
    --request POST \
    --data '{"secret_shares": 1, "secret_threshold": 1}' \
    http://127.0.0.1:8200/v1/sys/init | jq

	export VAULT_TOKEN="<root_token>"
	
	// unseal vault
	curl \
    --request POST \
    --data '{"key": "<keys_base64>"}' \
    http://127.0.0.1:8200/v1/sys/unseal | jq

	// validate initialization
	curl http://127.0.0.1:8200/v1/sys/init
	
	// enable APpRole auth method
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{"type": "approle"}' \
    http://127.0.0.1:8200/v1/sys/auth/approle

	// create policy
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request PUT \
    --data '{"policy":"# Dev servers have version 2 of KV secrets engine mounted by default, so will\n# need these paths to grant permissions:\npath \"secret/data/*\" {\n  capabilities = [\"create\", \"update\"]\n}\n\npath \"secret/data/foo\" {\n  capabilities = [\"read\"]\n}\n"}' \
    http://127.0.0.1:8200/v1/sys/policies/acl/my-policy
	
	// enable KV v2 secrets engine
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{ "type":"kv-v2" }' \
    http://127.0.0.1:8200/v1/sys/mounts/secret
	
	// assign poilicy to role
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{"policies": ["my-policy"]}' \
    http://127.0.0.1:8200/v1/auth/approle/role/my-role
	
	// get my-role <role_id>
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
     http://127.0.0.1:8200/v1/auth/approle/role/my-role/role-id | jq -r ".data"

	// create/get <secret_id>
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    http://127.0.0.1:8200/v1/auth/approle/role/my-role/secret-id | jq -r ".data"

	// Login using <role_id> & <secret_id>, get <client_token>
	curl --request POST \
       --data '{"role_id": "<role_id>", "secret_id": "<secret_id>"}' \
       http://127.0.0.1:8200/v1/auth/approle/login | jq -r ".auth"

	// use as new VALUT_TOKEN
	export VAULT_TOKEN="<client_token>"
	
	// create secret
	curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    --data '{ "data": {"password": "my-long-password"} }' \
    http://127.0.0.1:8200/v1/secret/data/creds | jq -r ".data"

	// clean up
	unset VAULT_TOKEN
	rm -r vault-data  // see config.hcl

