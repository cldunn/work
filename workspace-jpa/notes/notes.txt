Create Specification implementation
	// constructor with "filter" where filter is MyEntityDto (values)
	public class MySpecification implements Specification<MyEntity> {
		private MyEntityDto myEntityDto;
		public MySpecification(MyEntityDto myEntityDto) {
			super();
			this.myEntityDto = myEntityDto;
		}
		
		toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
			Predicate p1 = cb.conjunction();  // will and added predicates
			Predicate p2 = cb.disjunction();  // will or added predicates
			
			// 3 parts to clause segment: p1.getExpressions(); cb.equal(...); cb.fx parameters => root.get("fldNm"), dto.getFldNm()
			p1.getExpressions().add(root.get("myEntityFldNm").in("Apple", "Orange")) // simplest usage
			p1.getExpressions().add(cb.equal(root.get("myEntityFieldName"), myEntityDto.getMyEntityFieldName()));
			p1.getExpressions().add(cb.between(root.get("hireDate"), myEntityDto.getStartDate(), myEntityDto.getEndDate()))
			
			p2.getExpression().add(root.get("myEntityFldName").in("High", "Low"))
			p2.getExpression().add(root.get("myEntityFldName").isNull())
			
			return criteriaBuiler.and(p1, p2)
		}
	}
	
	// these and the like return predicates
	root.get(...).in(...), root.get(...).isNull
	cb.equal(root.get("xyz"), dto.getXyz()), cb.like(root.get("xyz"), "S" + '%'), cb.greaterThan(root.get("xyz"), dto.getXyz()), ..., cb.isNull(root.get("xyz")), ...

@Service
		myFindBy(myEntityDto, pageInfo) {
			...
			Pageable pageable = PageRequest.of(pageNo, size, Sort)
			
			
			page = myRepository.findAll(new MySpecification(myEntityDto>), pageable)
			List<MyEntity> myEntities = page.getContent()
			...
			return myEntityDtos;
		}
		
		myComboFindBy(myEntityDto, pageInfo) {
			...

			// alternatively can combine multiple specifications  using: and(Specification): or(Specification); not(Specification); where(Specification);
			List<MyEntity> results = myRepository.findAll(Specification.where(spec1).and(spec2));
			...
			
			return myEntityDtos;
		}
		
@Repository
	public interface MyRepository extends JpaRepository<MyEntity, Long>, JpaSpecificationExecutor<MyEntity>
		// findAll(Specification<T>)
		

@Query("SELECT c.year AS yearComment, COUNT(c.year) AS totalComment FROM Comment AS c GROUP BY c.year ORDER BY c.year DESC")
List<ICommentCount> countTotalCommentsByYearInterface();

@Query(value = "SELECT c.year AS yearComment, COUNT(c.*) AS totalComment FROM comment AS c GROUP BY c.year ORDER BY c.year DESC", nativeQuery = true)
List<ICommentCount> countTotalCommentsByYearNative();

CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
CriteriaQuery<Discount> criteriaQuery = criteriaBuilder.createQuery(Discount.class);
Root<Discount> root = criteriaQuery.from(entityManager.getMetamodel().entity(Discount.class));

SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
java.util.Date startDate = dateFormat.parse("24-02-2016");
java.util.Date endDate = dateFormat.parse("24-03-2016");

ParameterExpression<java.util.Date> parameter = criteriaBuilder.parameter(java.util.Date.class);

Predicate startDatePredicate = criteriaBuilder.greaterThanOrEqualTo(root.get(Discount_.discountStartDate).as(java.sql.Date.class), parameter);
Predicate endDatePredicate = criteriaBuilder.lessThanOrEqualTo(root.get(Discount_.discountEndDate).as(java.sql.Date.class), parameter);

Predicate startDateOrPredicate = criteriaBuilder.or(startDatePredicate, root.get(Discount_.discountStartDate).isNull());
Predicate endDateOrPredicate = criteriaBuilder.or(endDatePredicate, root.get(Discount_.discountEndDate).isNull());

Predicate and = criteriaBuilder.and(startDateOrPredicate, endDateOrPredicate);
criteriaQuery.where(and);

List<Discount> list = entityManager.createQuery(criteriaQuery)
        .setParameter(parameter, startDate, TemporalType.DATE)
        .setParameter(parameter, endDate, TemporalType.DATE)
        .getResultList();		