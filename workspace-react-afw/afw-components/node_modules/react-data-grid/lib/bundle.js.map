{"version":3,"file":"bundle.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/CheckboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/HeaderRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/SortIcon.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding-block: 0;\n  padding-inline: 8px;\n  border-inline-end: 1px solid var(--rdg-border-color);\n  border-block-end: 1px solid var(--rdg-border-color);\n  grid-row-start: var(--rdg-grid-row-start);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--rdg-selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not calculate width when contain is set to style or size\nexport const cellAutoResizeClassname = css`\n  .${cell} {\n    contain: content;\n  }\n`;\n\nexport const cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: var(--rdg-frozen-cell-box-shadow);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --rdg-selection-color: #66afe9;\n  --rdg-frozen-cell-box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  --rdg-font-size: 14px;\n\n  display: grid;\n\n  color-scheme: var(--rdg-color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  block-size: 350px;\n  border: 1px solid var(--rdg-border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--rdg-background-color);\n  color: var(--rdg-color);\n  font-size: var(--rdg-font-size);\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /* needed on Firefox */\n  &::before {\n    content: '';\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-start: 0;\n    block-size: var(--rdg-grid-block-size);\n    inline-size: var(--rdg-grid-inline-size);\n  }\n\n  &.rdg-dark {\n    --rdg-color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --rdg-color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  position: sticky;\n  inset-inline-start: 0;\n  grid-column-start: 1;\n`;\n","import { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast } from '../style';\n\nexport const row = css`\n  display: contents;\n  line-height: var(--rdg-row-height);\n  background-color: var(--rdg-background-color);\n\n  &:hover {\n    background-color: var(--rdg-row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--rdg-row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nconst topBoxShadow = 'inset 0 2px 0 0 var(--rdg-selection-color)';\nconst rightBoxShadow = 'inset calc(-2px * var(--rdg-sign)) 0 0 0 var(--rdg-selection-color)';\nconst bottomBoxShadow = 'inset 0 -2px 0 0 var(--rdg-selection-color)';\nconst leftBoxShadow = 'inset calc(2px * var(--rdg-sign)) 0 0 0 var(--rdg-selection-color)';\n\nconst rowSelected = css`\n  outline: none;\n\n  > .${cell} {\n    box-shadow: ${topBoxShadow}, ${bottomBoxShadow};\n    &:first-child {\n      box-shadow: ${topBoxShadow}, ${bottomBoxShadow}, ${leftBoxShadow};\n    }\n    &:last-child {\n      box-shadow: ${topBoxShadow}, ${bottomBoxShadow}, ${rightBoxShadow};\n    }\n  }\n\n  > .${cellFrozenLast} {\n    box-shadow: ${topBoxShadow}, ${bottomBoxShadow}, var(--rdg-frozen-cell-box-shadow);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n","import { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-inline-end: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  inline-size: 20px;\n  block-size: 20px;\n  border: 2px solid var(--rdg-border-color);\n  background-color: var(--rdg-background-color);\n  .${checkboxInput}:checked + & {\n    background-color: var(--rdg-checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--rdg-background-color);\n  }\n  .${checkboxInput}:focus + & {\n    border-color: var(--rdg-checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n  .${checkbox} {\n    border-color: var(--rdg-checkbox-disabled-border-color);\n    background-color: var(--rdg-checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport const CheckboxFormatter = forwardRef<HTMLInputElement, CheckboxFormatterProps>(\n  function CheckboxFormatter({ onChange, ...props }: CheckboxFormatterProps, ref) {\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n      onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n    }\n\n    return (\n      <label\n        className={clsx(checkboxLabelClassname, {\n          [checkboxLabelDisabledClassname]: props.disabled\n        })}\n      >\n        <input\n          type=\"checkbox\"\n          ref={ref}\n          {...props}\n          className={checkboxInputClassname}\n          onChange={handleChange}\n        />\n        <div className={checkboxClassname} />\n      </label>\n    );\n  }\n);\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Components, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Components<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Components<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const Formatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <Formatter\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      ref={ref}\n      tabIndex={tabIndex}\n      disabled={disabled}\n      checked={value}\n      onChange={onChange}\n    />\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-inline-start: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min, round } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        // avoid decimals as subpixel positioning can lead to cell borders not being displayed\n        const unallocatedWidth = viewportWidth - allocatedWidth;\n        const unallocatedColumnWidth = round(unallocatedWidth / unassignedColumnsCount);\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        allocatedWidth += width;\n        unassignedColumnsCount--;\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function HeaderRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const SortIcon = useDefaultComponents<R, SR>()!.sortIcon!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        <SortIcon sortDirection={sortDirection} />\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport DefaultHeaderRenderer from './HeaderRenderer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const HeaderRenderer = column.headerRenderer ?? DefaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'auto');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        minWidth: column.minWidth ?? undefined,\n        maxWidth: column.maxWidth ?? undefined\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      <HeaderRenderer\n        column={column}\n        sortDirection={sortDirection}\n        priority={priority}\n        onSort={onSort}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        isCellSelected={isCellSelected}\n      />\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'auto') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  display: contents;\n  line-height: var(--rdg-header-row-height);\n  background-color: var(--rdg-header-background-color);\n  font-weight: bold;\n\n  > .${cell} {\n    /* Should have a higher value than 1 to show up above frozen cells */\n    z-index: 2;\n    position: sticky;\n    inset-block-start: 0;\n  }\n\n  > .${cellFrozen} {\n    z-index: 3;\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--rdg-header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-inline-end: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  inset-block-start: var(--rdg-summary-row-top);\n  inset-block-end: var(--rdg-summary-row-bottom);\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    line-height: var(--rdg-summary-row-height);\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-block-start: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        { [summaryRowBorderClassname]: rowIdx === 0 },\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n  scrollToCell: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor,\n  scrollToCell\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n      scrollToCell();\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  inset-inline-end: 0;\n  inset-block-end: 0;\n  inline-size: 8px;\n  block-size: 8px;\n  background-color: var(--rdg-selection-color);\n\n  &:hover {\n    inline-size: 16px;\n    block-size: 16px;\n    border: 2px solid var(--rdg-selection-color);\n    background-color: var(--rdg-background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortIconProps } from './types';\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function SortIcon({ sortDirection }: SortIconProps) {\n  return sortDirection !== undefined ? (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  ) : null;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  cellAutoResizeClassname\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport SortIcon from './SortIcon';\nimport { CheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign,\n  abs,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Components,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  components?: Maybe<Components<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    components,\n    className,\n    style,\n    rowClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = components?.rowRenderer ?? defaultComponents?.rowRenderer ?? Row;\n  const sortIcon = components?.sortIcon ?? defaultComponents?.sortIcon ?? SortIcon;\n  const checkboxFormatter =\n    components?.checkboxFormatter ?? defaultComponents?.checkboxFormatter ?? CheckboxFormatter;\n  const noRowsFallback = components?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortIcon,\n      checkboxFormatter\n    }),\n    [sortIcon, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const columnElement = gridRef.current!.querySelector(\n      `[aria-colindex=\"${autoResizeColumn.idx + 1}\"]`\n    )!;\n    const width = columnElement.clientWidth + 2;\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number | 'auto') => {\n      if (width === 'auto') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    // scrollLeft is nagative when direction is rtl\n    setScrollLeft(abs(scrollLeft));\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      scrollToCell(position);\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return isRtl ? { idx: idx + 1, rowIdx } : { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return isRtl ? { idx: idx - 1, rowIdx } : { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    newSizes[autoResizeColumn.idx] = 'max-content';\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        scrollToCell={() => {\n          scrollToCell(selectedPosition);\n        }}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          gridRowStart={gridRowStart}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (summaryRowsCount > 0) {\n    templateRows += ` repeat(${summaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [cellAutoResizeClassname]: autoResizeColumn !== null\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-grid-inline-size': `${totalColumnWidth}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-grid-block-size': `${\n            max(totalRowHeight, clientHeight) +\n            headerRowHeight +\n            summaryRowsCount * summaryRowHeight\n          }px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2 ? 0 : -1}\n          className={focusSinkClassname}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={viewportColumns}\n          onColumnResize={handleColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChange}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {summaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rows.length + rowIdx + 1;\n              const isSummaryRowSelected =\n                selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (summaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (summaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={viewportColumns}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  inline-size: 100%;\n  block-size: 100%;\n  padding-block: 0;\n  padding-inline: 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--rdg-color);\n  background-color: var(--rdg-background-color);\n\n  font-family: inherit;\n  font-size: var(--rdg-font-size);\n\n  &:focus {\n    border-color: var(--rdg-selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellAutoResizeClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","CheckboxFormatter","forwardRef","onChange","props","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","disabled","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","Formatter","checkboxFormatter","ValueFormatter","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","type","length","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","getRowStyle","height","getCellStyle","gridColumnStart","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","columnMetric","get","unallocatedWidth","unallocatedColumnWidth","gridTemplateColumns","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","resizeObserver","clientWidth","clientHeight","devicePixelRatio","observe","disconnect","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","forceRender","onFocus","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","HeaderRenderer","sortDirection","priority","onSort","SortableHeaderCell","children","SortIcon","sortIcon","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","className","headerCellClass","DefaultHeaderRenderer","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onClick","onDoubleClick","handleFocus","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleRowChange","newRow","handleDragEnter","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","summaryRow","summaryRowBorderClassname","summaryRowClassname","SummaryRow","bottom","ariaRowIndex","cellEditing","EditCell","closeEditor","scrollToCell","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","onKeyDown","stopPropagation","onNavigation","commitChanges","renderFormatter","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","arrow","arrowClassname","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","components","style","ariaDescribedBy","testId","defaultComponents","RowRenderer","rowRenderer","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","headerRowsCount","summaryRowsCount","isSelectable","isHeaderRowSelected","leftKey","rightKey","defaultGridComponents","size","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","isSamePosition","columnElement","querySelector","newColumnWidths","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","newSizes","split","join","getDragHandle","getCellEditor","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","slice","isGroupRowSelected","cr","c","templateRows","isSummaryRowSelected","p1","p2","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":";;;;AAAA,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;AAC/B,EAAE,KAAK,GAAG,KAAK,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;AACjC,EAAE,IAAI,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;AAC9B;AACA,EAAE,IAAI,CAAC,GAAG,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE,EAAE,OAAO,EAAE;AAC1D;AACA,EAAE,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,EAAE,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC9C,EAAE,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC;AAC1B;AACA,EAAE,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC1B,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAChD,KAAK,MAAM;AACX,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AACL,GAAG,MAAM;AACT,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC5B,GAAG;AACH;AACA,EAAE,IAAI,KAAK,CAAC,UAAU,EAAE;AACxB,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,GAAG,GAAG,CAAC;AACnC,GAAG,MAAM;AACT,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD,GAAG;AACH;;;;;ACvBO,MAAMA,IAAI,sBAAV;AAqBA,MAAMC,aAAa,eAAeD,MAAlC;AAGA,MAAME,uBAAuB,sBAA7B;AAMA,MAAMC,UAAU,uBAAhB;AAMA,MAAMC,mBAAmB,sBAAsBD,YAA/C;AAEA,MAAME,cAAc,sBAApB;AAIA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;;;;;ACTP,MAAME,IAAI,uBAAV;AA8DO,MAAMC,aAAa,UAAUD,MAA7B;AAEP,MAAME,gBAAgB,qBAAtB;AAMO,MAAMC,yBAAyB,4BAA4BD,kBAA3D;AAEA,MAAME,kBAAkB,sBAAxB;;;;;ACvGA,MAAMC,GAAG,uBAAT;AAkBA,MAAMC,YAAY,cAAcD,KAAhC;AAOP,MAAME,WAAW,sBAAjB;AAkBO,MAAMC,oBAAoB,uBAAuBD,aAAjD;;;;;ACzCP,MAAME,aAAa,sBAAnB;AAUA,MAAMC,sBAAsB,yBAAyBD,eAArD;AAEA,MAAME,aAAa,uBAAnB;AAIA,MAAMC,sBAAsB,yBAAyBD,eAArD;AAEA,MAAME,QAAQ,sBAAd;AAeA,MAAMC,iBAAiB,mBAAmBD,UAA1C;AAEA,MAAME,qBAAqB,sBAA3B;AAQA,MAAMC,8BAA8B,kCAAkCD,uBAAtE;MAEaE,iBAAiB,gBAAGC,UAAU,CACzC,SAASD,iBAAT,CAA2B;AAAEE,EAAAA,QAAF;KAAeC;AAAf,CAA3B,EAA2EC,GAA3E,EAAgF;WACrEC,aAAaC,GAAwC;AAC5DJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAFD,CAASE,OAAV,EAAoBF,CAAC,CAACG,WAAH,CAA8BC,QAAjD,CAARR;;;sBAIAS;AACE,IAAA,WAAWC,IAAI,CAACnB,sBAAD,EACqBU,KAAK,CAACU,QAD3B,IACZd,8BADY,CADjB;AAAA,4BAKEe;AACE,MAAA,MAAK,UADP;AAEE,MAAA,KAAKV,GAFP;AAAA,SAGMD,KAHN;AAIE,MAAA,WAAWR,sBAJb;AAKE,MAAA,UAAUU;AALZ,MALF,eAYES;AAAK,MAAA,WAAWjB;AAAhB,MAZF;AAAA;AAPqC,CAAA;;AC9CpC,MAAMkB,eAAe,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,SAAhC,GAA4CC,iBAApE;;ACFA,SAASC,WAAT,CAAiDC,UAAjD,EAAsE;AAC3E,QAAMhB,GAAG,GAAGiB,MAAM,CAAI,IAAJ,CAAlB;AAEAN,EAAAA,eAAe,CAAC,MAAM;AAAA;;AACpB,QAAI,CAACK,UAAL,EAAiB;AACjB,oBAAAhB,GAAG,CAACkB,OAAJ,kCAAaC,KAAb,CAAmB;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAnB;AACD,GAHc,EAGZ,CAACJ,UAAD,CAHY,CAAf;AAKA,SAAO;AACLhB,IAAAA,GADK;AAELqB,IAAAA,QAAQ,EAAEL,UAAU,GAAG,CAAH,GAAO,CAAC;AAFvB,GAAP;AAID;;ACVD,MAAMM,gCAAgC,gBAAGC,aAAa,CAA8BC,SAA9B,CAAtD;MAEaC,iCAAiC,GAAGH,gCAAgC,CAACI;AAE3E,SAASC,oBAAT,GAAiE;AACtE,SAAOC,UAAU,CAACN,gCAAD,CAAjB;AACD;;ACCM,SAASO,mBAAT,CAA6B;AAClCC,EAAAA,KADkC;AAElCC,EAAAA,cAFkC;AAGlCtB,EAAAA,QAHkC;AAIlCX,EAAAA,QAJkC;AAKlC,gBAAckC,SALoB;AAMlC,qBAAmBC;AANe,CAA7B,EAOsB;AAC3B,QAAM;AAAEjC,IAAAA,GAAF;AAAOqB,IAAAA;AAAP,MAAoBN,WAAW,CAAmBgB,cAAnB,CAArC;AACA,QAAMG,SAAS,GAAGP,oBAAoB,GAAIQ,iBAA1C;AAEA,sBACEzB,IAAC,SAAD;AACE,kBAAYsB,SADd;AAEE,uBAAiBC,cAFnB;AAGE,IAAA,GAAG,EAAEjC,GAHP;AAIE,IAAA,QAAQ,EAAEqB,QAJZ;AAKE,IAAA,QAAQ,EAAEZ,QALZ;AAME,IAAA,OAAO,EAAEqB,KANX;AAOE,IAAA,QAAQ,EAAEhC;AAPZ,IADF;AAWD;;AChCM,SAASsC,cAAT,CAA+BrC,KAA/B,EAA6D;AAClE,MAAI;AACF,wBAAOW;AAAA,gBAAGX,KAAK,CAACf,GAAN,CAAUe,KAAK,CAACsC,MAAN,CAAaC,GAAvB;AAAH,MAAP;AACD,GAFD,CAEE,MAAM;AACN,WAAO,IAAP;AACD;AACF;;;;;ACJD,MAAMC,gBAAgB,sBAAtB;AAIA,MAAMC,yBAAyB,6BAA6BD,kBAA5D;AAEA,MAAME,KAAK,sBAAX;AAYA,MAAMC,cAAc,gBAAgBD,OAApC;AAEO,SAASE,oBAAT,CAAqC;AAC1CC,EAAAA,QAD0C;AAE1CC,EAAAA,UAF0C;AAG1Cd,EAAAA,cAH0C;AAI1Ce,EAAAA;AAJ0C,CAArC,EAKwB;QACvB;AAAE9C,IAAAA,GAAF;AAAOqB,IAAAA;AAAP,MAAoBN,WAAW,CAAkBgB,cAAlB;;WAE5BgB,cAAc;AAAET,IAAAA;AAAF,KAA+C;QAChEA,GAAG,KAAK,SAAS;AACnBQ,MAAAA,WAAW;;;;QAITE,CAAC,GAAGH,UAAU,GAAG,mBAAH,GAAyB;sBAG3CtC;AACE,IAAA,KAAKP,GADP;AAEE,IAAA,WAAWwC,yBAFb;AAGE,IAAA,UAAUnB,QAHZ;AAIE,IAAA,WAAW0B,aAJb;AAAA,eAMGH,QANH,eAOElC;AAAK,MAAA,SAAQ,UAAb;AAAwB,MAAA,OAAM,IAA9B;AAAmC,MAAA,QAAO,GAA1C;AAA8C,MAAA,WAAWgC,cAAzD;AAAyE,yBAAzE;AAAA,6BACEhC;AAAM,QAAA,GAAGsC;AAAT;AADF,MAPF;AAAA;;;ACtCJ,MAAMC,mBAAmB,gBAAG1B,aAAa,CAAsBC,SAAtB,CAAzC;AAEO,MAAM0B,oBAAoB,GAAGD,mBAAmB,CAACvB,QAAjD;AAEP,MAAMyB,yBAAyB,gBAAG5B,aAAa,CAG7CC,SAH6C,CAA/C;AAKO,MAAM4B,0BAA0B,GAAGD,yBAAyB,CAACzB,QAA7D;AAEA,SAAS2B,eAAT,GAAsF;AAC3F,QAAMC,mBAAmB,GAAG1B,UAAU,CAACqB,mBAAD,CAAtC;AACA,QAAMM,yBAAyB,GAAG3B,UAAU,CAACuB,yBAAD,CAA5C;;AAEA,MAAIG,mBAAmB,KAAK9B,SAAxB,IAAqC+B,yBAAyB,KAAK/B,SAAvE,EAAkF;AAChF,UAAM,IAAIgC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAO,CAACF,mBAAD,EAAsBC,yBAAtB,CAAP;AACD;;MCnBYE,iBAAiB,GAAG;;AAEjC,SAASC,eAAT,CAAyB3D,KAAzB,EAAyD;AACvD,QAAM,CAAC4D,aAAD,EAAgBC,oBAAhB,IAAwCP,eAAe,EAA7D;AAEA,sBACE3C,IAAC,mBAAD;AACE,kBAAW,QADb;AAEE,IAAA,cAAc,EAAEX,KAAK,CAACgC,cAFxB;AAGE,IAAA,KAAK,EAAE4B,aAHT;AAIE,IAAA,QAAQ,EAAE,CAACvD,OAAD,EAAUyD,YAAV,KAA2B;AACnCD,MAAAA,oBAAoB,CAAC;AAAE5E,QAAAA,GAAG,EAAEe,KAAK,CAACf,GAAb;AAAkBoB,QAAAA,OAAlB;AAA2ByD,QAAAA;AAA3B,OAAD,CAApB;AACD;AANH,IADF;AAUD;;AAED,SAASC,oBAAT,CAA8B/D,KAA9B,EAAmE;AACjE,QAAM,CAAC4D,aAAD,EAAgBC,oBAAhB,IAAwCP,eAAe,EAA7D;AAEA,sBACE3C,IAAC,mBAAD;AACE,kBAAW,cADb;AAEE,IAAA,cAAc,EAAEX,KAAK,CAACgC,cAFxB;AAGE,IAAA,KAAK,EAAE4B,aAHT;AAIE,IAAA,QAAQ,EAAGvD,OAAD,IAAa;AACrBwD,MAAAA,oBAAoB,CAAC;AAAE5E,QAAAA,GAAG,EAAEe,KAAK,CAACf,GAAb;AAAkBoB,QAAAA,OAAlB;AAA2ByD,QAAAA,YAAY,EAAE;AAAzC,OAAD,CAApB;AACD;AANH,IADF;AAUD;;MAGYE,YAA8B,GAAG;AAC5CzB,EAAAA,GAAG,EAAEmB,iBADuC;AAE5CO,EAAAA,IAAI,EAAE,EAFsC;AAG5CC,EAAAA,KAAK,EAAE,EAHqC;AAI5CC,EAAAA,QAAQ,EAAE,EAJkC;AAK5CC,EAAAA,SAAS,EAAE,KALiC;AAM5CC,EAAAA,QAAQ,EAAE,KANkC;AAO5CC,EAAAA,MAAM,EAAE,IAPoC;;AAQ5CC,EAAAA,cAAc,CAACvE,KAAD,EAAQ;AACpB,wBACEW,IAAC,mBAAD;AACE,oBAAW,YADb;AAEE,MAAA,cAAc,EAAEX,KAAK,CAACgC,cAFxB;AAGE,MAAA,KAAK,EAAEhC,KAAK,CAACwE,eAHf;AAIE,MAAA,QAAQ,EAAExE,KAAK,CAACyE;AAJlB,MADF;AAQD,GAjB2C;;AAkB5CC,EAAAA,SAAS,EAAEf,eAlBiC;AAmB5CgB,EAAAA,cAAc,EAAEZ;AAnB4B;;ACnCvC,SAASa,UAAT,CACLtC,MADK,EAELuC,qBAFK,EAGLC,IAHK,EAIe;AACpB,QAAMC,OAAO,GAAG,OAAOzC,MAAM,CAACyC,OAAd,KAA0B,UAA1B,GAAuCzC,MAAM,CAACyC,OAAP,CAAeD,IAAf,CAAvC,GAA8D,CAA9E;;AACA,MACEE,MAAM,CAACC,SAAP,CAAiBF,OAAjB,KACAA,OAAO,GAAI,CADX,KAGC,CAACzC,MAAM,CAACgC,MAAR,IAAkBhC,MAAM,CAAC4C,GAAP,GAAaH,OAAb,GAAwB,CAAxB,IAA6BF,qBAHhD,CADF,EAKE;AACA,WAAOE,OAAP;AACD;;AACD,SAAOtD,SAAP;AACD;;AChBD,MAAM0D,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAE3B,cAF2B,EAI3B,KAJ2B,EAK3B,UAL2B,EAM3B,UAN2B,EAO3B,SAP2B,EAQ3B,IAR2B,EAS3B,QAT2B,EAU3B,MAV2B,EAW3B,SAX2B,EAY3B,YAZ2B,EAa3B,OAb2B,EAe3B,KAf2B,EAiB3B,WAjB2B,EAkB3B,WAlB2B,EAmB3B,YAnB2B,EAoB3B,SApB2B,EAqB3B,KArB2B,EAsB3B,MAtB2B,EAuB3B,UAvB2B,EAwB3B,QAxB2B,EA0B3B,QA1B2B,EA4B3B,aA5B2B,EA6B3B,QA7B2B,EA8B3B,OA9B2B,EA+B3B,MA/B2B,EAiC3B,aAjC2B,EAmC3B,IAnC2B,EAqC3B,IArC2B,EAsC3B,IAtC2B,EAuC3B,IAvC2B,EAwC3B,IAxC2B,EAyC3B,IAzC2B,EA0C3B,IA1C2B,EA2C3B,IA3C2B,EA4C3B,KA5C2B,EA6C3B,KA7C2B,EA8C3B,KA9C2B,CAAR,CAArB;AAiDO,SAASC,iBAAT,CAA2BlF,CAA3B,EAA4D;AACjE,SAAO,CAACA,CAAC,CAACmF,OAAF,IAAanF,CAAC,CAACoF,OAAhB,KAA4BpF,CAAC,CAACoC,GAAF,KAAU,SAA7C;AACD;AAEM,SAASiD,kBAAT,CAA4BC,KAA5B,EAAiF;AACtF,SAAO,CAACN,YAAY,CAACO,GAAb,CAAiBD,KAAK,CAAClD,GAAvB,CAAR;AACD;AAQM,SAASoD,kBAAT,CAA4B;AAAEpD,EAAAA,GAAF;AAAOnC,EAAAA;AAAP,CAA5B,EAA2F;AAChG,MACEmC,GAAG,KAAK,KAAR,KACCnC,MAAM,YAAYwF,gBAAlB,IACCxF,MAAM,YAAYyF,mBADnB,IAECzF,MAAM,YAAY0F,iBAHpB,CADF,EAKE;AACA,WAAO1F,MAAM,CAAC2F,OAAP,CACL,6FADK,CAAP;AAGD;;AACD,SAAO,KAAP;AACD;;AClEM,SAASC,sBAAT,CAAuC;AAC5CC,EAAAA,gBAD4C;AAE5CC,EAAAA,OAF4C;AAG5CC,EAAAA,IAH4C;AAI5CC,EAAAA;AAJ4C,CAAvC,EAKwC;AAC7C,QAAM9D,MAAM,GAAG4D,OAAO,CAACD,gBAAgB,CAACf,GAAlB,CAAtB;AACA,QAAMjG,GAAG,GAAGkH,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAhB;AACA,SAAO,CAACD,UAAU,CAACnH,GAAD,CAAX,IAAoBqH,cAAc,CAAChE,MAAD,EAASrD,GAAT,CAAzC;AACD;AAEM,SAASqH,cAAT,CAA+BhE,MAA/B,EAAgErD,GAAhE,EAAiF;AACtF,SACEqD,MAAM,CAACiE,MAAP,IAAiB,IAAjB,IACA,CAACjE,MAAM,CAACkE,QADR,IAEA,CAAC,OAAOlE,MAAM,CAACmE,QAAd,KAA2B,UAA3B,GAAwCnE,MAAM,CAACmE,QAAP,CAAgBxH,GAAhB,CAAxC,GAA+DqD,MAAM,CAACmE,QAAvE,MAAqF,KAHvF;AAKD;AAiBM,SAASC,sBAAT,CAAuC;AAC5CP,EAAAA,IAD4C;AAE5CQ,EAAAA,WAF4C;AAG5CN,EAAAA,MAH4C;AAI5CxB,EAAAA,qBAJ4C;AAK5CvC,EAAAA,MAL4C;AAM5C8D,EAAAA;AAN4C,CAAvC,EAaJ;AACD,MAAIC,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACjB,WAAOzB,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,MAAAA,IAAI,EAAE;AAAR,KAAhC,CAAjB;AACD;;AAED,MAAIP,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGF,IAAI,CAACU,MAAjC,EAAyC;AACvC,UAAM5H,GAAG,GAAGkH,IAAI,CAACE,MAAD,CAAhB;;AACA,QAAI,CAACD,UAAU,CAACnH,GAAD,CAAf,EAAsB;AACpB,aAAO2F,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,QAAAA,IAAI,EAAE,KAAR;AAAe3H,QAAAA;AAAf,OAAhC,CAAjB;AACD;;AACD,WAAOwC,SAAP;AACD;;AAED,MAAIkF,WAAJ,EAAiB;AACf,WAAO/B,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAC/C+B,MAAAA,IAAI,EAAE,SADyC;AAE/C3H,MAAAA,GAAG,EAAE0H,WAAW,CAACN,MAAM,GAAGF,IAAI,CAACU,MAAf;AAF+B,KAAhC,CAAjB;AAID;;AAED,SAAOpF,SAAP;AACD;AAEM,SAASqF,2BAAT,CAA4C;AACjDC,EAAAA,kBADiD;AAEjDb,EAAAA,OAFiD;AAGjDc,EAAAA,cAHiD;AAIjDb,EAAAA,IAJiD;AAKjDQ,EAAAA,WALiD;AAMjDM,EAAAA,SANiD;AAOjDC,EAAAA,SAPiD;AAQjDC,EAAAA,eAAe,EAAE;AAAEjC,IAAAA,GAAG,EAAEkC;AAAP,GARgC;AASjDC,EAAAA,YATiD;AAUjDxC,EAAAA,qBAViD;AAWjDyC,EAAAA,kBAXiD;AAYjDlB,EAAAA;AAZiD,CAA5C,EAa8C;AACnD,MAAI;AAAElB,IAAAA,GAAG,EAAEqC,OAAP;AAAgBlB,IAAAA,MAAM,EAAEmB;AAAxB,MAAuCH,YAA3C;;AAEA,QAAMI,UAAU,GAAIC,SAAD,IAAwB;AACzC,QAAIF,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGrB,IAAI,CAACU,MAAzC,EAAiD;AAC/C,YAAM5H,GAAG,GAAGkH,IAAI,CAACqB,UAAD,CAAhB;AACA,UAAIpB,UAAU,CAACnH,GAAD,CAAd,EAAqB;AACtB;;AAGD,SAAK,MAAMqD,MAAX,IAAqB0E,cAArB,EAAqC;AACnC,YAAMW,MAAM,GAAGrF,MAAM,CAAC4C,GAAtB;AACA,UAAIyC,MAAM,GAAGJ,OAAb,EAAsB;AACtB,YAAMxC,OAAO,GAAG2B,sBAAsB,CAAC;AACrCP,QAAAA,IADqC;AAErCQ,QAAAA,WAFqC;AAGrCN,QAAAA,MAAM,EAAEmB,UAH6B;AAIrC3C,QAAAA,qBAJqC;AAKrCvC,QAAAA,MALqC;AAMrC8D,QAAAA;AANqC,OAAD,CAAtC;;AASA,UAAIrB,OAAO,IAAIwC,OAAO,GAAGI,MAArB,IAA+BJ,OAAO,GAAGxC,OAAO,GAAG4C,MAAvD,EAA+D;AAC7DJ,QAAAA,OAAO,GAAGI,MAAM,IAAID,SAAS,GAAG3C,OAAH,GAAa,CAA1B,CAAhB;AACA;AACD;AACF;AACF,GAxBD;;AA0BA,MAAIuC,kBAAkB,CAACD,YAAD,CAAtB,EAAsC;AACpCI,IAAAA,UAAU,CAACF,OAAO,GAAGH,UAAV,GAAuB,CAAxB,CAAV;AACD;;AAED,MAAIL,kBAAkB,KAAK,MAA3B,EAAmC;AACjC,UAAMa,YAAY,GAAG1B,OAAO,CAACW,MAA7B;AACA,UAAMgB,iBAAiB,GAAGN,OAAO,KAAKK,YAAtC;AACA,UAAME,mBAAmB,GAAGP,OAAO,KAAK,CAAC,CAAzC;;AAEA,QAAIM,iBAAJ,EAAuB;AACrB,UAAId,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMgB,SAAS,GAAGP,UAAU,KAAKN,SAAjC;;AACA,YAAI,CAACa,SAAL,EAAgB;AACdR,UAAAA,OAAO,GAAG,CAAV;AACAC,UAAAA,UAAU,IAAI,CAAd;AACD;AACF,OAND,MAMO;AACLD,QAAAA,OAAO,GAAG,CAAV;AACD;AACF,KAVD,MAUO,IAAIO,mBAAJ,EAAyB;AAC9B,UAAIf,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMiB,UAAU,GAAGR,UAAU,KAAKP,SAAlC;;AACA,YAAI,CAACe,UAAL,EAAiB;AACfR,UAAAA,UAAU,IAAI,CAAd;AACAD,UAAAA,OAAO,GAAGK,YAAY,GAAG,CAAzB;AACD;AACF,OAND,MAMO;AACLL,QAAAA,OAAO,GAAGK,YAAY,GAAG,CAAzB;AACD;;AACDH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AAED,SAAO;AAAEvC,IAAAA,GAAG,EAAEqC,OAAP;AAAgBlB,IAAAA,MAAM,EAAEmB;AAAxB,GAAP;AACD;AAWM,SAASS,WAAT,CAAqB;AAC1BlB,EAAAA,kBAD0B;AAE1BmB,EAAAA,SAF0B;AAG1BjB,EAAAA,SAH0B;AAI1BC,EAAAA,SAJ0B;AAK1BjB,EAAAA,gBAAgB,EAAE;AAAEI,IAAAA,MAAF;AAAUnB,IAAAA;AAAV,GALQ;AAM1B3E,EAAAA;AAN0B,CAArB,EAOsB;AAG3B,MAAIwG,kBAAkB,KAAK,MAAvB,IAAiCA,kBAAkB,KAAK,YAA5D,EAA0E;AACxE,UAAMoB,eAAe,GAAGjD,GAAG,KAAKgD,SAAhC;AACA,UAAME,gBAAgB,GAAGlD,GAAG,KAAK,CAAjC;AACA,UAAMmD,SAAS,GAAGhC,MAAM,KAAKa,SAA7B;AACA,UAAMoB,UAAU,GAAGjC,MAAM,KAAKY,SAA9B;AAEA,WAAO1G,QAAQ,GAAG6H,gBAAgB,IAAIE,UAAvB,GAAoCH,eAAe,IAAIE,SAAtE;AACD;;AAED,SAAO,KAAP;AACD;;AChLM,MAAM;AAAEE,EAAAA,GAAF;AAAOC,EAAAA,GAAP;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,KAAnB;AAA0BC,EAAAA,IAA1B;AAAgCC,EAAAA;AAAhC,IAAwCC,IAA9C;AAEA,SAASC,sBAAT,CACLC,SADK,EAE+B;AACpC,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,UAAM,IAAItF,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;AAEM,SAASuF,WAAT,CAAqB3C,MAArB,EAAqC4C,MAArC,EAAqE;AAC1E,MAAIA,MAAM,KAAKxH,SAAf,EAA0B;AACxB,WAAO;AACL,8BAAwB4E,MADnB;AAEL,0BAAqB,GAAE4C,MAAO;AAFzB,KAAP;AAID;;AACD,SAAO;AAAE,4BAAwB5C;AAA1B,GAAP;AACD;AAEM,SAAS6C,YAAT,CACL5G,MADK,EAELyC,OAFK,EAGgB;AACrB,SAAO;AACLoE,IAAAA,eAAe,EAAE7G,MAAM,CAAC4C,GAAP,GAAa,CADzB;AAELkE,IAAAA,aAAa,EAAErE,OAAO,KAAKtD,SAAZ,GAAyB,QAAOsD,OAAQ,EAAxC,GAA4CtD,SAFtD;AAGL4H,IAAAA,gBAAgB,EAAE/G,MAAM,CAACgC,MAAP,GAAiB,yBAAwBhC,MAAM,CAAC4C,GAAI,GAApD,GAAyDzD;AAHtE,GAAP;AAKD;AAEM,SAAS6H,gBAAT,CACLhH,MADK,EAEL,GAAGiH,YAFE,EAGG;AACR,SAAO9I,IAAI,CACTnC,aADS,EAMT,GAAGiL,YANM,EAGgBjH,MAAM,CAACgC,MAHvB,IAGN7F,mBAHM,EAIoB6D,MAAM,CAACkH,kBAJ3B,IAIN7K,uBAJM,CAAX;AAQD;;AC5BM,SAAS8K,oBAAT,CAAqC;AAC1CC,EAAAA,UAD0C;AAE1CC,EAAAA,YAF0C;AAG1CC,EAAAA,aAH0C;AAI1CC,EAAAA,UAJ0C;AAK1CC,EAAAA,oBAL0C;AAM1CC,EAAAA,UAN0C;AAO1CC,EAAAA;AAP0C,CAArC,EAQ0B;AAAA;;AAC/B,QAAMC,cAAc,4BAAGH,oBAAH,oBAAGA,oBAAoB,CAAEI,QAAzB,oCAAqC,EAAzD;AACA,QAAMC,gBAAgB,6BAAGL,oBAAH,oBAAGA,oBAAoB,CAAEpF,SAAzB,qCAAsCrC,cAA5D;AACA,QAAM+H,eAAe,6BAAGN,oBAAH,oBAAGA,oBAAoB,CAAEzF,QAAzB,qCAAqC,KAA1D;AACA,QAAMgG,gBAAgB,6BAAGP,oBAAH,oBAAGA,oBAAoB,CAAE1F,SAAzB,qCAAsC,KAA5D;AAEA,QAAM;AAAE8B,IAAAA,OAAF;AAAWc,IAAAA,cAAX;AAA2BnC,IAAAA,qBAA3B;AAAkDyF,IAAAA;AAAlD,MAA8DC,OAAO,CAAC,MAKvE;AAEH,UAAMD,OAAiB,GAAG,EAA1B;AACA,QAAIzF,qBAAqB,GAAG,CAAC,CAA7B;AAEA,UAAMqB,OAAO,GAAGwD,UAAU,CAACc,GAAX,CAAgBC,SAAD,IAAe;AAAA;;AAC5C,YAAMjE,QAAQ,2BAAGuD,UAAH,oBAAGA,UAAU,CAAEW,QAAZ,CAAqBD,SAAS,CAAClI,GAA/B,CAAH,mCAA0C,KAAxD;AAEA,YAAM+B,MAAM,GAAGkC,QAAQ,IAAIiE,SAAS,CAACnG,MAAtB,IAAgC,KAA/C;AAEA,YAAMhC,MAAwC,GAAG,EAC/C,GAAGmI,SAD4C;AAE/CvF,QAAAA,GAAG,EAAE,CAF0C;AAG/CZ,QAAAA,MAH+C;AAI/CkF,QAAAA,kBAAkB,EAAE,KAJ2B;AAK/ChD,QAAAA,QAL+C;AAM/CnC,QAAAA,QAAQ,yBAAEoG,SAAS,CAACpG,QAAZ,kCAAwB+F,eANe;AAO/ChG,QAAAA,SAAS,0BAAEqG,SAAS,CAACrG,SAAZ,mCAAyBiG,gBAPa;AAQ/C3F,QAAAA,SAAS,0BAAE+F,SAAS,CAAC/F,SAAZ,mCAAyByF;AARa,OAAjD;;AAWA,UAAI3D,QAAJ,EAAc;AAAA;;AACZ,iCAAAlE,MAAM,CAACqC,cAAP,oCAAArC,MAAM,CAACqC,cAAP,GAA0B/B,oBAA1B;AACD;;AAED,UAAI0B,MAAJ,EAAY;AACVO,QAAAA,qBAAqB;AACtB;;AAED,aAAOvC,MAAP;AACD,KAzBe,CAAhB;AA2BA4D,IAAAA,OAAO,CAACyE,IAAR,CAAa,CAAC;AAAEpI,MAAAA,GAAG,EAAEqI,IAAP;AAAatG,MAAAA,MAAM,EAAEuG;AAArB,KAAD,EAAiC;AAAEtI,MAAAA,GAAG,EAAEuI,IAAP;AAAaxG,MAAAA,MAAM,EAAEyG;AAArB,KAAjC,KAAoE;AAE/E,UAAIH,IAAI,KAAKlH,iBAAb,EAAgC,OAAO,CAAC,CAAR;AAChC,UAAIoH,IAAI,KAAKpH,iBAAb,EAAgC,OAAO,CAAP;;AAGhC,UAAIqG,UAAJ,YAAIA,UAAU,CAAEW,QAAZ,CAAqBE,IAArB,CAAJ,EAAgC;AAC9B,YAAIb,UAAU,CAACW,QAAX,CAAoBI,IAApB,CAAJ,EAA+B;AAC7B,iBAAOf,UAAU,CAACiB,OAAX,CAAmBJ,IAAnB,IAA2Bb,UAAU,CAACiB,OAAX,CAAmBF,IAAnB,CAAlC;AACD;;AACD,eAAO,CAAC,CAAR;AACD;;AACD,UAAIf,UAAJ,YAAIA,UAAU,CAAEW,QAAZ,CAAqBI,IAArB,CAAJ,EAAgC,OAAO,CAAP;;AAGhC,UAAID,OAAJ,EAAa;AACX,YAAIE,OAAJ,EAAa,OAAO,CAAP;AACb,eAAO,CAAC,CAAR;AACD;;AACD,UAAIA,OAAJ,EAAa,OAAO,CAAP;AAGb,aAAO,CAAP;AACD,KAvBD;AAyBA,UAAM/D,cAAyC,GAAG,EAAlD;AACAd,IAAAA,OAAO,CAAC+E,OAAR,CAAgB,CAAC3I,MAAD,EAAS4C,GAAT,KAAiB;AAC/B5C,MAAAA,MAAM,CAAC4C,GAAP,GAAaA,GAAb;;AAEA,UAAI5C,MAAM,CAACkE,QAAX,EAAqB;AACnB8D,QAAAA,OAAO,CAACY,IAAR,CAAa5I,MAAM,CAACC,GAApB;AACD;;AAED,UAAID,MAAM,CAACyC,OAAP,IAAkB,IAAtB,EAA4B;AAC1BiC,QAAAA,cAAc,CAACkE,IAAf,CAAoB5I,MAApB;AACD;AACF,KAVD;;AAYA,QAAIuC,qBAAqB,KAAK,CAAC,CAA/B,EAAkC;AAChCqB,MAAAA,OAAO,CAACrB,qBAAD,CAAP,CAA+B2E,kBAA/B,GAAoD,IAApD;AACD;;AAED,WAAO;AACLtD,MAAAA,OADK;AAELc,MAAAA,cAFK;AAGLnC,MAAAA,qBAHK;AAILyF,MAAAA;AAJK,KAAP;AAMD,GArF0E,EAqFxE,CAACZ,UAAD,EAAaS,gBAAb,EAA+BE,gBAA/B,EAAiDD,eAAjD,EAAkEL,UAAlE,CArFwE,CAA3E;AAuFA,QAAM;AAAEoB,IAAAA,aAAF;AAAiBC,IAAAA,gBAAjB;AAAmCC,IAAAA,sBAAnC;AAA2DC,IAAAA;AAA3D,MAA6Ef,OAAO,CAAC,MAKtF;AACH,UAAMe,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIJ,gBAAgB,GAAG,CAAvB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;AACA,QAAII,eAAe,GAAG,EAAtB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;;AAEA,SAAK,MAAMrJ,MAAX,IAAqB4D,OAArB,EAA8B;AAC5B,UAAIhC,KAAK,GAAG0H,iBAAiB,CAACtJ,MAAD,EAASqH,YAAT,EAAuBC,aAAvB,CAA7B;;AAEA,UAAI1F,KAAK,KAAKzC,SAAd,EAAyB;AACvBkK,QAAAA,sBAAsB;AACvB,OAFD,MAEO;AACLzH,QAAAA,KAAK,GAAG2H,gBAAgB,CAAC3H,KAAD,EAAQ5B,MAAR,EAAgB2H,cAAhB,CAAxB;AACAyB,QAAAA,cAAc,IAAIxH,KAAlB;AACAoH,QAAAA,aAAa,CAACQ,GAAd,CAAkBxJ,MAAlB,EAA0B;AAAE4B,UAAAA,KAAF;AAASsH,UAAAA,IAAI,EAAE;AAAf,SAA1B;AACD;AACF;;AAED,SAAK,MAAMlJ,MAAX,IAAqB4D,OAArB,EAA8B;AAC5B,UAAIhC,KAAJ;;AACA,UAAIoH,aAAa,CAAC5F,GAAd,CAAkBpD,MAAlB,CAAJ,EAA+B;AAC7B,cAAMyJ,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkB1J,MAAlB,CAArB;AACAyJ,QAAAA,YAAY,CAACP,IAAb,GAAoBA,IAApB;AACA,SAAC;AAAEtH,UAAAA;AAAF,YAAY6H,YAAb;AACD,OAJD,MAIO;AAEL,cAAME,gBAAgB,GAAGrC,aAAa,GAAG8B,cAAzC;AACA,cAAMQ,sBAAsB,GAAGzD,KAAK,CAACwD,gBAAgB,GAAGN,sBAApB,CAApC;AACAzH,QAAAA,KAAK,GAAG2H,gBAAgB,CAACK,sBAAD,EAAyB5J,MAAzB,EAAiC2H,cAAjC,CAAxB;AACAyB,QAAAA,cAAc,IAAIxH,KAAlB;AACAyH,QAAAA,sBAAsB;AACtBL,QAAAA,aAAa,CAACQ,GAAd,CAAkBxJ,MAAlB,EAA0B;AAAE4B,UAAAA,KAAF;AAASsH,UAAAA;AAAT,SAA1B;AACD;;AACDJ,MAAAA,gBAAgB,IAAIlH,KAApB;AACAsH,MAAAA,IAAI,IAAItH,KAAR;AACAuH,MAAAA,eAAe,IAAK,GAAEvH,KAAM,KAA5B;AACD;;AAED,QAAIW,qBAAqB,KAAK,CAAC,CAA/B,EAAkC;AAChC,YAAMkH,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkB9F,OAAO,CAACrB,qBAAD,CAAzB,CAArB;AACAwG,MAAAA,sBAAsB,GAAGU,YAAY,CAACP,IAAb,GAAoBO,YAAY,CAAC7H,KAA1D;AACD;;AAED,UAAMiH,aAAqC,GAAG;AAC5CgB,MAAAA,mBAAmB,EAAEV;AADuB,KAA9C;;AAIA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIvH,qBAArB,EAA4CuH,CAAC,EAA7C,EAAiD;AAC/C,YAAM9J,MAAM,GAAG4D,OAAO,CAACkG,CAAD,CAAtB;AACAjB,MAAAA,aAAa,CAAE,qBAAoB7I,MAAM,CAAC4C,GAAI,EAAjC,CAAb,GAAoD,GAAEoG,aAAa,CAACU,GAAd,CAAkB1J,MAAlB,EAA2BkJ,IAAK,IAAtF;AACD;;AAED,WAAO;AAAEL,MAAAA,aAAF;AAAiBC,MAAAA,gBAAjB;AAAmCC,MAAAA,sBAAnC;AAA2DC,MAAAA;AAA3D,KAAP;AACD,GA7DyF,EA6DvF,CAAC3B,YAAD,EAAezD,OAAf,EAAwB0D,aAAxB,EAAuCK,cAAvC,EAAuDpF,qBAAvD,CA7DuF,CAA1F;AA+DA,QAAM,CAACwH,mBAAD,EAAsBC,iBAAtB,IAA2C/B,OAAO,CAAC,MAAwB;AAC/E,QAAI,CAACP,oBAAL,EAA2B;AACzB,aAAO,CAAC,CAAD,EAAI9D,OAAO,CAACW,MAAR,GAAiB,CAArB,CAAP;AACD;;AAED,UAAM0F,YAAY,GAAG1C,UAAU,GAAGwB,sBAAlC;AACA,UAAMmB,aAAa,GAAG3C,UAAU,GAAGD,aAAnC;AAEA,UAAM6C,UAAU,GAAGvG,OAAO,CAACW,MAAR,GAAiB,CAApC;AACA,UAAM6F,sBAAsB,GAAGnE,GAAG,CAAC1D,qBAAqB,GAAG,CAAzB,EAA4B4H,UAA5B,CAAlC;;AAGA,QAAIF,YAAY,IAAIC,aAApB,EAAmC;AACjC,aAAO,CAACE,sBAAD,EAAyBA,sBAAzB,CAAP;AACD;;AAGD,QAAIC,kBAAkB,GAAGD,sBAAzB;;AACA,WAAOC,kBAAkB,GAAGF,UAA5B,EAAwC;AACtC,YAAM;AAAEjB,QAAAA,IAAF;AAAQtH,QAAAA;AAAR,UAAkBoH,aAAa,CAACU,GAAd,CAAkB9F,OAAO,CAACyG,kBAAD,CAAzB,CAAxB;;AAGA,UAAInB,IAAI,GAAGtH,KAAP,GAAeqI,YAAnB,EAAiC;AAC/B;AACD;;AACDI,MAAAA,kBAAkB;AACnB;;AAGD,QAAIC,gBAAgB,GAAGD,kBAAvB;;AACA,WAAOC,gBAAgB,GAAGH,UAA1B,EAAsC;AACpC,YAAM;AAAEjB,QAAAA,IAAF;AAAQtH,QAAAA;AAAR,UAAkBoH,aAAa,CAACU,GAAd,CAAkB9F,OAAO,CAAC0G,gBAAD,CAAzB,CAAxB;;AAGA,UAAIpB,IAAI,GAAGtH,KAAP,IAAgBsI,aAApB,EAAmC;AACjC;AACD;;AACDI,MAAAA,gBAAgB;AACjB;;AAED,UAAMP,mBAAmB,GAAG7D,GAAG,CAACkE,sBAAD,EAAyBC,kBAAkB,GAAG,CAA9C,CAA/B;AACA,UAAML,iBAAiB,GAAG/D,GAAG,CAACkE,UAAD,EAAaG,gBAAgB,GAAG,CAAhC,CAA7B;AAEA,WAAO,CAACP,mBAAD,EAAsBC,iBAAtB,CAAP;AACD,GA5CuD,EA4CrD,CACDhB,aADC,EAEDpF,OAFC,EAGDrB,qBAHC,EAIDgF,UAJC,EAKDwB,sBALC,EAMDzB,aANC,EAODI,oBAPC,CA5CqD,CAAxD;AAsDA,SAAO;AACL9D,IAAAA,OADK;AAELc,IAAAA,cAFK;AAGLqF,IAAAA,mBAHK;AAILC,IAAAA,iBAJK;AAKLnB,IAAAA,aALK;AAMLG,IAAAA,aANK;AAOLF,IAAAA,gBAPK;AAQLvG,IAAAA,qBARK;AASLwG,IAAAA,sBATK;AAULf,IAAAA;AAVK,GAAP;AAYD;;AAED,SAASsB,iBAAT,CACE;AAAErJ,EAAAA,GAAF;AAAO2B,EAAAA;AAAP,CADF,EAEEyF,YAFF,EAGEC,aAHF,EAIsB;AACpB,MAAID,YAAY,CAACjE,GAAb,CAAiBnD,GAAjB,CAAJ,EAA2B;AAEzB,WAAOoH,YAAY,CAACqC,GAAb,CAAiBzJ,GAAjB,CAAP;AACD;;AACD,MAAI,OAAO2B,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,SAAS2I,IAAT,CAAc3I,KAAd,CAAjC,EAAuD;AACrD,WAAOwE,KAAK,CAAEkB,aAAa,GAAGkD,QAAQ,CAAC5I,KAAD,EAAQ,EAAR,CAAzB,GAAwC,GAAzC,CAAZ;AACD;;AACD,SAAOzC,SAAP;AACD;;AAED,SAASoK,gBAAT,CACE3H,KADF,EAEE;AAAEgG,EAAAA,QAAF;AAAY/F,EAAAA;AAAZ,CAFF,EAGE8F,cAHF,EAIU;AACR/F,EAAAA,KAAK,GAAGsE,GAAG,CAACtE,KAAD,EAAQgG,QAAR,WAAQA,QAAR,GAAoBD,cAApB,CAAX;;AAEA,MAAI,OAAO9F,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAOoE,GAAG,CAACrE,KAAD,EAAQC,QAAR,CAAV;AACD;;AAED,SAAOD,KAAP;AACD;;AC7RM,SAAS6I,iBAAT,GAIL;AACA,QAAMC,OAAO,GAAG9L,MAAM,CAAiB,IAAjB,CAAtB;AACA,QAAM,CAAC+L,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAC,CAAD,CAA5C;AAEAvM,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM;AAAE0M,MAAAA;AAAF,QAAqBzM,MAA3B;AAIA,QAAIyM,cAAc,IAAI,IAAtB,EAA4B;AAE5B,UAAMC,cAAc,GAAG,IAAID,cAAJ,CAAmB,MAAM;AAG9C,YAAM;AAAEE,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAgCT,OAAO,CAAC7L,OAA9C;AAIA+L,MAAAA,YAAY,CAACM,WAAW,IAAIE,gBAAgB,GAAG,CAAnB,KAAyB,CAAzB,GAA6B,CAA7B,GAAiC,CAArC,CAAZ,CAAZ;AACAL,MAAAA,aAAa,CAACI,YAAD,CAAb;AACD,KATsB,CAAvB;AAWAF,IAAAA,cAAc,CAACI,OAAf,CAAuBX,OAAO,CAAC7L,OAA/B;AAEA,WAAO,MAAM;AACXoM,MAAAA,cAAc,CAACK,UAAf;AACD,KAFD;AAGD,GAvBc,EAuBZ,EAvBY,CAAf;AAyBA,SAAO,CAACZ,OAAD,EAAUC,SAAV,EAAqBG,UAArB,CAAP;AACD;;AClCM,SAASS,aAAT,CAA0DC,EAA1D,EAAiE;AACtE,QAAM7N,GAAG,GAAGiB,MAAM,CAAC4M,EAAD,CAAlB;AAEAhN,EAAAA,SAAS,CAAC,MAAM;AACdb,IAAAA,GAAG,CAACkB,OAAJ,GAAc2M,EAAd;AACD,GAFQ,CAAT;AAIA,SAAOC,WAAW,CAAC,CAAC,GAAGjJ,IAAJ,KAA4B;AAC7C7E,IAAAA,GAAG,CAACkB,OAAJ,CAAY,GAAG2D,IAAf;AACD,GAFiB,EAEf,EAFe,CAAlB;AAGD;;ACVM,SAASkJ,gBAAT,CAA0B/M,UAA1B,EAA+C;AACpD,QAAMhB,GAAG,GAAGiB,MAAM,CAAiB,IAAjB,CAAlB;AAEA,QAAM+M,cAAc,GAAG/M,MAAM,CAAC,KAAD,CAA7B;AACA,QAAM,GAAGgN,WAAH,IAAkBf,QAAQ,CAAU,EAAV,CAAhC;AAEAvM,EAAAA,eAAe,CAAC,MAAM;AAAA;;AACpB,QAAI,CAACK,UAAL,EAAiB;AACfgN,MAAAA,cAAc,CAAC9M,OAAf,GAAyB,KAAzB;AACA;AACD;;AAED,QAAI8M,cAAc,CAAC9M,OAAnB,EAA4B;AAG1B+M,MAAAA,WAAW,CAAC,EAAD,CAAX;AACA;AACD;;AACD,oBAAAjO,GAAG,CAACkB,OAAJ,kCAAaC,KAAb,CAAmB;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAnB;AACD,GAbc,EAaZ,CAACJ,UAAD,CAbY,CAAf;;AAeA,WAASkN,OAAT,CAAiB1I,KAAjB,EAA0D;AACxD,QAAIA,KAAK,CAACrF,MAAN,KAAiBH,GAAG,CAACkB,OAAzB,EAAkC;AAChC8M,MAAAA,cAAc,CAAC9M,OAAf,GAAyB,IAAzB;AACD;AACF;;AAED,QAAMiN,SAAS,GAAGnN,UAAU,IAAI,CAACgN,cAAc,CAAC9M,OAAhD;AAEA,SAAO;AACLlB,IAAAA,GADK;AAELqB,IAAAA,QAAQ,EAAE8M,SAAS,GAAG,CAAH,GAAO,CAAC,CAFtB;AAGLD,IAAAA;AAHK,GAAP;AAKD;;ACpBM,SAASE,kBAAT,CAAmC;AACxCnI,EAAAA,OADwC;AAExCc,EAAAA,cAFwC;AAGxCb,EAAAA,IAHwC;AAIxCQ,EAAAA,WAJwC;AAKxC0F,EAAAA,mBALwC;AAMxCC,EAAAA,iBANwC;AAOxCzH,EAAAA,qBAPwC;AAQxCyJ,EAAAA,mBARwC;AASxCC,EAAAA,iBATwC;AAUxCnI,EAAAA;AAVwC,CAAnC,EAWwB;AAE7B,QAAMoI,QAAQ,GAAGjE,OAAO,CAAC,MAAM;AAC7B,QAAI8B,mBAAmB,KAAK,CAA5B,EAA+B,OAAO,CAAP;AAE/B,QAAImC,QAAQ,GAAGnC,mBAAf;;AAEA,UAAMoC,cAAc,GAAG,CAAC9G,MAAD,EAAiB5C,OAAjB,KAAiD;AACtE,UAAIA,OAAO,KAAKtD,SAAZ,IAAyBkG,MAAM,GAAG5C,OAAT,GAAmBsH,mBAAhD,EAAqE;AACnEmC,QAAAA,QAAQ,GAAG7G,MAAX;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KAND;;AAQA,SAAK,MAAMrF,MAAX,IAAqB0E,cAArB,EAAqC;AAEnC,YAAMW,MAAM,GAAGrF,MAAM,CAAC4C,GAAtB;AACA,UAAIyC,MAAM,IAAI6G,QAAd,EAAwB;;AACxB,UAAIC,cAAc,CAAC9G,MAAD,EAAS/C,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,QAAAA,IAAI,EAAE;AAAR,OAAhC,CAAnB,CAAlB,EAA2F;AACzF;AACD;;AAGD,WAAK,IAAIP,MAAM,GAAGiI,mBAAlB,EAAuCjI,MAAM,IAAIkI,iBAAjD,EAAoElI,MAAM,EAA1E,EAA8E;AAC5E,cAAMpH,GAAG,GAAGkH,IAAI,CAACE,MAAD,CAAhB;AACA,YAAID,UAAU,CAACnH,GAAD,CAAd,EAAqB;;AACrB,YACEwP,cAAc,CAAC9G,MAAD,EAAS/C,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,UAAAA,IAAI,EAAE,KAAR;AAAe3H,UAAAA;AAAf,SAAhC,CAAnB,CADhB,EAEE;AACA;AACD;AACF;;AAGD,UAAI0H,WAAW,IAAI,IAAnB,EAAyB;AACvB,aAAK,MAAM1H,GAAX,IAAkB0H,WAAlB,EAA+B;AAC7B,cACE8H,cAAc,CACZ9G,MADY,EAEZ/C,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,YAAAA,IAAI,EAAE,SAAR;AAAmB3H,YAAAA;AAAnB,WAAhC,CAFE,CADhB,EAKE;AACA;AACD;AACF;AACF;AACF;;AAED,WAAOuP,QAAP;AACD,GAhDuB,EAgDrB,CACDF,mBADC,EAEDC,iBAFC,EAGDpI,IAHC,EAIDQ,WAJC,EAKD0F,mBALC,EAMDxH,qBANC,EAODmC,cAPC,EAQDZ,UARC,CAhDqB,CAAxB;AA2DA,SAAOmE,OAAO,CAAC,MAA0C;AACvD,UAAMmE,eAA0C,GAAG,EAAnD;;AACA,SAAK,IAAI/G,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAI2E,iBAA/B,EAAkD3E,MAAM,EAAxD,EAA4D;AAC1D,YAAMrF,MAAM,GAAG4D,OAAO,CAACyB,MAAD,CAAtB;AAEA,UAAIA,MAAM,GAAG6G,QAAT,IAAqB,CAAClM,MAAM,CAACgC,MAAjC,EAAyC;AACzCoK,MAAAA,eAAe,CAACxD,IAAhB,CAAqB5I,MAArB;AACD;;AAED,WAAOoM,eAAP;AACD,GAVa,EAUX,CAACF,QAAD,EAAWlC,iBAAX,EAA8BpG,OAA9B,CAVW,CAAd;AAWD;;AC5ED,SAASyI,eAAT,CAAyBC,GAAzB,EAAkE;AAChE,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAP;AACD;;AAEM,SAASG,eAAT,CAA4B;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA,SAFiC;AAGjCxB,EAAAA,YAHiC;AAIjCyB,EAAAA,SAJiC;AAKjC5E,EAAAA,OALiC;AAMjC6E,EAAAA,UANiC;AAOjCC,EAAAA,gBAPiC;AAQjCpF,EAAAA;AARiC,CAA5B,EASiB;AACtB,QAAM,CAACqF,WAAD,EAAcC,SAAd,IAA2B/E,OAAO,CAAC,MAAM;AAC7C,QAAID,OAAO,CAACzD,MAAR,KAAmB,CAAnB,IAAwBsI,UAAU,IAAI,IAA1C,EAAgD,OAAO,CAAC1N,SAAD,EAAYuN,OAAO,CAACnI,MAApB,CAAP;;AAEhD,UAAM0I,SAAS,GAAG,CAChBpJ,IADgB,EAEhB,CAACqJ,UAAD,EAAa,GAAGC,oBAAhB,CAFgB,EAGhBC,aAHgB,KAI6B;AAC7C,UAAIC,cAAc,GAAG,CAArB;AACA,YAAMC,MAA4B,GAAG,EAArC;;AACA,WAAK,MAAM,CAACrN,GAAD,EAAMsN,SAAN,CAAX,IAA+BC,MAAM,CAACC,OAAP,CAAeZ,UAAU,CAAChJ,IAAD,EAAOqJ,UAAP,CAAzB,CAA/B,EAA6E;AAE3E,cAAM,CAACQ,WAAD,EAAcC,cAAd,IACJR,oBAAoB,CAAC5I,MAArB,KAAgC,CAAhC,GACI,CAACgJ,SAAD,EAAYA,SAAS,CAAChJ,MAAtB,CADJ,GAEI0I,SAAS,CAACM,SAAD,EAAYJ,oBAAZ,EAAkCC,aAAa,GAAGC,cAAhB,GAAiC,CAAnE,CAHf;AAIAC,QAAAA,MAAM,CAACrN,GAAD,CAAN,GAAc;AAAEsN,UAAAA,SAAF;AAAaG,UAAAA,WAAb;AAA0BN,UAAAA,aAAa,EAAEA,aAAa,GAAGC;AAAzD,SAAd;AACAA,QAAAA,cAAc,IAAIM,cAAc,GAAG,CAAnC;AACD;;AAED,aAAO,CAACL,MAAD,EAASD,cAAT,CAAP;AACD,KAlBD;;AAoBA,WAAOJ,SAAS,CAACP,OAAD,EAAU1E,OAAV,EAAmB,CAAnB,CAAhB;AACD,GAxBuC,EAwBrC,CAACA,OAAD,EAAU6E,UAAV,EAAsBH,OAAtB,CAxBqC,CAAxC;AA0BA,QAAM,CAAC7I,IAAD,EAAOC,UAAP,IAAqBmE,OAAO,CAAC,MAG9B;AACH,UAAM2F,YAAY,GAAG,IAAI9K,GAAJ,EAArB;AACA,QAAI,CAACiK,WAAL,EAAkB,OAAO,CAACL,OAAD,EAAU5I,UAAV,CAAP;AAElB,UAAM+J,aAAqC,GAAG,EAA9C;;AACA,UAAMC,WAAW,GAAG,CAClBjK,IADkB,EAElBkK,QAFkB,EAGlBC,KAHkB,KAIT;AACT,UAAI3B,eAAe,CAACxI,IAAD,CAAnB,EAA2B;AACzBgK,QAAAA,aAAa,CAACjF,IAAd,CAAmB,GAAG/E,IAAtB;AACA;AACD;;AACD2J,MAAAA,MAAM,CAACS,IAAP,CAAYpK,IAAZ,EAAkB8E,OAAlB,CAA0B,CAACpI,QAAD,EAAW2N,QAAX,EAAqBD,IAArB,KAA8B;AAAA;;AAEtD,cAAME,EAAE,GAAGJ,QAAQ,KAAK5O,SAAb,GAA0B,GAAE4O,QAAS,KAAIxN,QAAS,EAAlD,GAAsDA,QAAjE;AACA,cAAMC,UAAU,4BAAGsM,gBAAH,oBAAGA,gBAAgB,CAAE1J,GAAlB,CAAsB+K,EAAtB,CAAH,oCAAgC,KAAhD;AACA,cAAM;AAAEZ,UAAAA,SAAF;AAAaG,UAAAA,WAAb;AAA0BN,UAAAA;AAA1B,YAA4CvJ,IAAI,CAACtD,QAAD,CAAtD;AAEA,cAAM6N,QAAqB,GAAG;AAC5BD,UAAAA,EAD4B;AAE5BJ,UAAAA,QAF4B;AAG5BxN,UAAAA,QAH4B;AAI5BC,UAAAA,UAJ4B;AAK5B+M,UAAAA,SAL4B;AAM5BS,UAAAA,KAN4B;AAO5BE,UAAAA,QAP4B;AAQ5Bd,UAAAA,aAR4B;AAS5BiB,UAAAA,OAAO,EAAEJ,IAAI,CAAC1J;AATc,SAA9B;AAWAsJ,QAAAA,aAAa,CAACjF,IAAd,CAAmBwF,QAAnB;AACAR,QAAAA,YAAY,CAACU,GAAb,CAAiBF,QAAjB;;AAEA,YAAI5N,UAAJ,EAAgB;AACdsN,UAAAA,WAAW,CAACJ,WAAD,EAAcS,EAAd,EAAkBH,KAAK,GAAG,CAA1B,CAAX;AACD;AACF,OAvBD;AAwBD,KAjCD;;AAmCAF,IAAAA,WAAW,CAACf,WAAD,EAAc5N,SAAd,EAAyB,CAAzB,CAAX;AACA,WAAO,CAAC0O,aAAD,EAAgB/J,UAAhB,CAAP;;AAEA,aAASA,UAAT,CAAoBnH,GAApB,EAA8D;AAC5D,aAAOiR,YAAY,CAACxK,GAAb,CAAiBzG,GAAjB,CAAP;AACD;AACF,GAjDiC,EAiD/B,CAACmQ,gBAAD,EAAmBC,WAAnB,EAAgCL,OAAhC,CAjD+B,CAAlC;AAmDA,QAAM;AAAE6B,IAAAA,cAAF;AAAkBC,IAAAA,gBAAlB;AAAoCC,IAAAA,SAApC;AAA+CC,IAAAA,YAA/C;AAA6DC,IAAAA;AAA7D,MAA4E1G,OAAO,CAAC,MAAM;AAC9F,QAAI,OAAO0E,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAO;AACL4B,QAAAA,cAAc,EAAE5B,SAAS,GAAG9I,IAAI,CAACU,MAD5B;AAELiK,QAAAA,gBAAgB,EAAG,WAAU3K,IAAI,CAACU,MAAO,KAAIoI,SAAU,KAFlD;AAGL8B,QAAAA,SAAS,EAAG1K,MAAD,IAAoBA,MAAM,GAAG4I,SAHnC;AAIL+B,QAAAA,YAAY,EAAE,MAAM/B,SAJf;AAKLgC,QAAAA,UAAU,EAAGC,MAAD,IAAoBxI,KAAK,CAACwI,MAAM,GAAGjC,SAAV;AALhC,OAAP;AAOD;;AAED,QAAI4B,cAAc,GAAG,CAArB;AACA,QAAIC,gBAAgB,GAAG,GAAvB;AAIA,UAAMK,YAAY,GAAGhL,IAAI,CAACqE,GAAL,CAAUvL,GAAD,IAA0B;AACtD,YAAMmS,gBAAgB,GAAGhL,UAAU,CAACnH,GAAD,CAAV,GACrBgQ,SAAS,CAAC;AAAErI,QAAAA,IAAI,EAAE,OAAR;AAAiB3H,QAAAA;AAAjB,OAAD,CADY,GAErBgQ,SAAS,CAAC;AAAErI,QAAAA,IAAI,EAAE,KAAR;AAAe3H,QAAAA;AAAf,OAAD,CAFb;AAGA,YAAMoS,QAAQ,GAAG;AAAEC,QAAAA,GAAG,EAAET,cAAP;AAAuB5H,QAAAA,MAAM,EAAEmI;AAA/B,OAAjB;AACAN,MAAAA,gBAAgB,IAAK,GAAEM,gBAAiB,KAAxC;AACAP,MAAAA,cAAc,IAAIO,gBAAlB;AACA,aAAOC,QAAP;AACD,KARoB,CAArB;;AAUA,UAAME,cAAc,GAAIlL,MAAD,IAAoB;AACzC,aAAOmC,GAAG,CAAC,CAAD,EAAID,GAAG,CAACpC,IAAI,CAACU,MAAL,GAAc,CAAf,EAAkBR,MAAlB,CAAP,CAAV;AACD,KAFD;;AAIA,WAAO;AACLwK,MAAAA,cADK;AAELC,MAAAA,gBAFK;AAGLC,MAAAA,SAAS,EAAG1K,MAAD,IAAoB8K,YAAY,CAACI,cAAc,CAAClL,MAAD,CAAf,CAAZ,CAAqCiL,GAH/D;AAILN,MAAAA,YAAY,EAAG3K,MAAD,IAAoB8K,YAAY,CAACI,cAAc,CAAClL,MAAD,CAAf,CAAZ,CAAqC4C,MAJlE;;AAKLgI,MAAAA,UAAU,CAACC,MAAD,EAAiB;AACzB,YAAIM,KAAK,GAAG,CAAZ;AACA,YAAIC,GAAG,GAAGN,YAAY,CAACtK,MAAb,GAAsB,CAAhC;;AACA,eAAO2K,KAAK,IAAIC,GAAhB,EAAqB;AACnB,gBAAMC,MAAM,GAAGF,KAAK,GAAG9I,KAAK,CAAC,CAAC+I,GAAG,GAAGD,KAAP,IAAgB,CAAjB,CAA5B;AACA,gBAAMG,aAAa,GAAGR,YAAY,CAACO,MAAD,CAAZ,CAAqBJ,GAA3C;AAEA,cAAIK,aAAa,KAAKT,MAAtB,EAA8B,OAAOQ,MAAP;;AAE9B,cAAIC,aAAa,GAAGT,MAApB,EAA4B;AAC1BM,YAAAA,KAAK,GAAGE,MAAM,GAAG,CAAjB;AACD,WAFD,MAEO,IAAIC,aAAa,GAAGT,MAApB,EAA4B;AACjCO,YAAAA,GAAG,GAAGC,MAAM,GAAG,CAAf;AACD;;AAED,cAAIF,KAAK,GAAGC,GAAZ,EAAiB,OAAOA,GAAP;AAClB;;AACD,eAAO,CAAP;AACD;;AAvBI,KAAP;AAyBD,GAvDwF,EAuDtF,CAACrL,UAAD,EAAa6I,SAAb,EAAwB9I,IAAxB,CAvDsF,CAAzF;AAyDA,MAAImI,mBAAmB,GAAG,CAA1B;AACA,MAAIC,iBAAiB,GAAGpI,IAAI,CAACU,MAAL,GAAc,CAAtC;;AAEA,MAAImD,oBAAJ,EAA0B;AACxB,UAAM4H,iBAAiB,GAAG,CAA1B;AACA,UAAMC,kBAAkB,GAAGZ,UAAU,CAAC/B,SAAD,CAArC;AACA,UAAM4C,gBAAgB,GAAGb,UAAU,CAAC/B,SAAS,GAAGzB,YAAb,CAAnC;AACAa,IAAAA,mBAAmB,GAAG9F,GAAG,CAAC,CAAD,EAAIqJ,kBAAkB,GAAGD,iBAAzB,CAAzB;AACArD,IAAAA,iBAAiB,GAAGhG,GAAG,CAACpC,IAAI,CAACU,MAAL,GAAc,CAAf,EAAkBiL,gBAAgB,GAAGF,iBAArC,CAAvB;AACD;;AAED,SAAO;AACLtD,IAAAA,mBADK;AAELC,IAAAA,iBAFK;AAGLpI,IAAAA,IAHK;AAILmJ,IAAAA,SAJK;AAKLuB,IAAAA,cALK;AAMLC,IAAAA,gBANK;AAOL1K,IAAAA,UAPK;AAQL2K,IAAAA,SARK;AASLC,IAAAA,YATK;AAULC,IAAAA;AAVK,GAAP;AAYD;;;;;AC9LD,MAAMc,cAAc,uBAApB;AASA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;AAEA,MAAME,cAAc,uBAApB;AAOA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;AAEe,SAASE,cAAT,CAA+B;AAC5C7P,EAAAA,MAD4C;AAE5C8P,EAAAA,aAF4C;AAG5CC,EAAAA,QAH4C;AAI5CC,EAAAA,MAJ4C;AAK5CtQ,EAAAA;AAL4C,CAA/B,EAMgB;MACzB,CAACM,MAAM,CAAC+B,UAAU,oBAAO1D;AAAA,cAAG2B,MAAM,CAAC2B;AAAV,IAAP;sBAGpBtD,IAAC,kBAAD;AACE,IAAA,QAAQ2R,MADV;AAEE,IAAA,eAAeF,aAFjB;AAGE,IAAA,UAAUC,QAHZ;AAIE,IAAA,gBAAgBrQ,cAJlB;AAAA,cAMGM,MAAM,CAAC2B;AANV;;;AAoBJ,SAASsO,kBAAT,CAAmC;AACjCD,EAAAA,MADiC;AAEjCF,EAAAA,aAFiC;AAGjCC,EAAAA,QAHiC;AAIjCG,EAAAA,QAJiC;AAKjCxQ,EAAAA;AALiC,CAAnC,EAMmC;QAC3ByQ,QAAQ,GAAG7Q,oBAAoB,GAAW8Q;QAC1C;AAAEzS,IAAAA,GAAF;AAAOqB,IAAAA;AAAP,MAAoBN,WAAW,CAAkBgB,cAAlB;;WAE5BgB,cAAcyC,OAA6C;QAC9DA,KAAK,CAAClD,GAANkD,KAAc,GAAdA,IAAqBA,KAAK,CAAClD,GAANkD,KAAc,SAAS;AAE9CA,MAAAA,KAAK,CAACkN,cAANlN;AACA6M,MAAAA,MAAM,CAAC7M,KAAK,CAACH,OAANG,IAAiBA,KAAK,CAACF,OAAxB,CAAN+M;;;;WAIKM,YAAYnN,OAA0C;AAC7D6M,IAAAA,MAAM,CAAC7M,KAAK,CAACH,OAANG,IAAiBA,KAAK,CAACF,OAAxB,CAAN+M;;;sBAIA9R;AACE,IAAA,KAAKP,GADP;AAEE,IAAA,UAAUqB,QAFZ;AAGE,IAAA,WAAW0Q,uBAHb;AAIE,IAAA,SAASY,WAJX;AAKE,IAAA,WAAW5P,aALb;AAAA,4BAOErC;AAAM,MAAA,WAAWuR,uBAAjB;AAAA,gBAA2CM;AAA3C,MAPF,eAQEhS;AAAA,8BACEG,IAAC,QAAD;AAAU,QAAA,eAAeyR;AAAzB,QADF,EAEGC,QAFH;AAAA,MARF;AAAA;;;;;;ACvEJ,MAAMQ,aAAa,sBAAnB;AAcA,MAAMC,sBAAsB,yBAAyBD,eAArD;AAoBe,SAASE,UAAT,CAA2B;AACxCzQ,EAAAA,MADwC;AAExCyC,EAAAA,OAFwC;AAGxC/C,EAAAA,cAHwC;AAIxCgR,EAAAA,cAJwC;AAKxCxO,EAAAA,eALwC;AAMxCC,EAAAA,wBANwC;AAOxCwO,EAAAA,WAPwC;AAQxCC,EAAAA,mBARwC;AASxCC,EAAAA,UATwC;AAUxCC,EAAAA,eAVwC;AAWxCC,EAAAA;AAXwC,CAA3B,EAYY;AAAA;;QACnBC,KAAK,GAAGD,SAAS,KAAK;QACtB;AAAEpT,IAAAA,GAAF;AAAOqB,IAAAA,QAAP;AAAiB6M,IAAAA;AAAjB,MAA6BH,gBAAgB,CAAChM,cAAD;QAC7CuR,SAAS,GAAGN,WAAH,oBAAGA,WAAW,CAAEO,SAAbP,CAAwBtI,IAAD,IAAUA,IAAI,CAAC8I,SAAL9I,KAAmBrI,MAAM,CAACC,GAA3D0Q;QACZS,UAAU,GACdH,SAAS,KAAK9R,SAAd8R,IAA2BA,SAAS,GAAG,CAAC,CAAxCA,GAA4CN,WAAW,CAAEM,SAAF,CAAvDA,GAAsE9R;QAClE2Q,aAAa,GAAGsB,UAAH,oBAAGA,UAAU,CAAEL;QAC5BhB,QAAQ,GAAGqB,UAAU,KAAKjS,SAAfiS,IAA4BT,WAAW,CAAEpM,MAAboM,GAAsB,CAAlDS,GAAsDH,SAAS,GAAI,CAAnEG,GAAuEjS;QAClFkS,QAAQ,GACZvB,aAAa,IAAI,CAACC,QAAlBD,GAA8BA,aAAa,KAAK,KAAlBA,GAA0B,WAA1BA,GAAwC,YAAtEA,GAAsF3Q;QAElFmS,SAAS,GAAGtK,gBAAgB,CAAChH,MAAD,EAASA,MAAM,CAACuR,eAAhB,EACNvR,MAAM,CAAC8B,SADD,IAC/B0O,sBAD+B;QAI5BX,gBAAc,4BAAG7P,MAAM,CAACiC,cAAV,oCAA4BuP;;WAEvCC,cAActO,OAA2C;QAC5DA,KAAK,CAACuO,WAANvO,KAAsB,OAAtBA,IAAiCA,KAAK,CAACwO,OAANxO,KAAkB,GAAG;;;;UAIpD;AAAEyO,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAA+B1O;UAC/B;AAAE2O,MAAAA,KAAF;AAAS5I,MAAAA;AAAT,QAAkB0I,aAAa,CAACG,qBAAdH;UAClBhD,MAAM,GAAGoC,KAAK,GAAG7N,KAAK,CAAC6O,OAAN7O,GAAgB+F,IAAnB,GAA0B4I,KAAK,GAAG3O,KAAK,CAAC6O;;QAExDpD,MAAM,GAAG,IAAI;;;;aAKRqD,cAAc9O,OAAqB;YACpC;AAAE2O,QAAAA,KAAF;AAAS5I,QAAAA;AAAT,UAAkB0I,aAAa,CAACG,qBAAdH;YAClBhQ,KAAK,GAAGoP,KAAK,GAAGc,KAAK,GAAGlD,MAARkD,GAAiB3O,KAAK,CAAC6O,OAA1B,GAAoC7O,KAAK,CAAC6O,OAAN7O,GAAgByL,MAAhBzL,GAAyB+F;;UAC5EtH,KAAK,GAAG,GAAG;AACb8O,QAAAA,cAAc,CAAC1Q,MAAD,EAAS4B,KAAT,CAAd8O;;;;aAIKwB,uBAAuB;AAC9BN,MAAAA,aAAa,CAACO,mBAAdP,CAAkC,aAAlCA,EAAiDK,aAAjDL;AACAA,MAAAA,aAAa,CAACO,mBAAdP,CAAkC,oBAAlCA,EAAwDM,oBAAxDN;;;AAGFA,IAAAA,aAAa,CAACQ,iBAAdR,CAAgCC,SAAhCD;AACAA,IAAAA,aAAa,CAACS,gBAAdT,CAA+B,aAA/BA,EAA8CK,aAA9CL;AACAA,IAAAA,aAAa,CAACS,gBAAdT,CAA+B,oBAA/BA,EAAqDM,oBAArDN;;;WAGO5B,OAAOsC,WAAoB;QAC9B1B,mBAAmB,IAAI,MAAM;UAC3B;AAAE2B,MAAAA;AAAF,QAA0BvS;;QAC5BoR,UAAU,KAAKjS,WAAW;YAEtBqT,QAAoB,GAAG;AAC3BrB,QAAAA,SAAS,EAAEnR,MAAM,CAACC,GADS;AAE3B8Q,QAAAA,SAAS,EAAEwB,mBAAmB,GAAG,MAAH,GAAY;AAFf;AAI7B3B,MAAAA,mBAAmB,CAACD,WAAW,IAAI2B,SAAf3B,GAA2B,CAAC,GAAGA,WAAJ,EAAiB6B,QAAjB,CAA3B7B,GAAwD,CAAC6B,QAAD,CAAzD,CAAnB5B;AANF,WAOO;UACD6B;;UAEDF,mBAAmB,IAAIzC,aAAa,KAAK,MAAzCyC,IACA,CAACA,mBAAD,IAAwBzC,aAAa,KAAK,OAC3C;AACA2C,QAAAA,cAAc,GAAG;AACftB,UAAAA,SAAS,EAAEnR,MAAM,CAACC,GADH;AAEf8Q,UAAAA,SAAS,EAAEjB,aAAa,KAAK,KAAlBA,GAA0B,MAA1BA,GAAmC;AAF/B,SAAjB2C;;;UAKEH,WAAW;cACPI,eAAe,GAAG,CAAC,GAAG/B,WAAJ;;YACpB8B,gBAAgB;AAElBC,UAAAA,eAAe,CAACzB,SAAD,CAAfyB,GAA8BD,cAA9BC;AAFF,eAGO;AAELA,UAAAA,eAAe,CAACC,MAAhBD,CAAuBzB,SAAvByB,EAAmC,CAAnCA;;;AAEF9B,QAAAA,mBAAmB,CAAC8B,eAAD,CAAnB9B;AATF,aAUO;AACLA,QAAAA,mBAAmB,CAAC6B,cAAc,GAAG,CAACA,cAAD,CAAH,GAAsB,EAArC,CAAnB7B;;;;;WAKGgC,UAAU;AACjB/B,IAAAA,UAAU,CAAC7Q,MAAM,CAAC4C,GAAR,CAAViO;;;WAGOgC,cAAc1P,OAAyC;UACxD;AAAE2O,MAAAA,KAAF;AAAS5I,MAAAA;AAAT,QAAkB/F,KAAK,CAACyO,aAANzO,CAAoB4O,qBAApB5O;UAClByL,MAAM,GAAGoC,KAAK,GAAG7N,KAAK,CAAC6O,OAAN7O,GAAgB+F,IAAnB,GAA0B4I,KAAK,GAAG3O,KAAK,CAAC6O;;QAExDpD,MAAM,GAAG,IAAI;;;;AAKjB8B,IAAAA,cAAc,CAAC1Q,MAAD,EAAS,MAAT,CAAd0Q;;;WAGOoC,YAAY3P,OAAyC;AAC5D0I,IAAAA,OAAO,CAAC1I,KAAD,CAAP0I;;QACIiF,iBAAiB;AAEnBD,MAAAA,UAAU,CAAC,CAAD,CAAVA;;;;sBAKFxS;AACE,IAAA,MAAK,cADP;AAEE,qBAAe2B,MAAM,CAAC4C,GAAP5C,GAAa,CAF9B;AAGE,qBAAeN,cAHjB;AAIE,iBAAW2R,QAJb;AAKE,oBAAc5O,OALhB;AAME,IAAA,KAAK9E,GANP;cAQYmT,eAAe,GAAG,CAAH,GAAO9R,QARlC;AASE,IAAA,WAAWsS,SATb;AAUE,IAAA,OAAO,EACL,GAAG1K,YAAY,CAAC5G,MAAD,EAASyC,OAAT,CADV;AAELmF,MAAAA,QAAQ,sBAAE5H,MAAM,CAAC4H,QAAT,+BAAqBzI,SAFxB;AAGL0C,MAAAA,QAAQ,sBAAE7B,MAAM,CAAC6B,QAAT,+BAAqB1C;AAHxB,KAVT;AAeE,IAAA,SAAS2T,WAfX;AAgBE,IAAA,SAASF,OAhBX;AAiBE,IAAA,eAAe5S,MAAM,CAAC8B,SAAP9B,GAAmB6S,aAAnB7S,GAAmCb,SAjBpD;AAkBE,IAAA,eAAea,MAAM,CAAC8B,SAAP9B,GAAmByR,aAAnBzR,GAAmCb,SAlBpD;AAAA,2BAoBEd,IAACwR,gBAAD;AACE,MAAA,QAAQ7P,MADV;AAEE,MAAA,eAAe8P,aAFjB;AAGE,MAAA,UAAUC,QAHZ;AAIE,MAAA,QAAQC,MAJV;AAKE,MAAA,iBAAiB9N,eALnB;AAME,MAAA,0BAA0BC,wBAN5B;AAOE,MAAA,gBAAgBzC;AAPlB;AApBF;;;;;;AC1IJ,MAAMqT,SAAS,uBAAf;AAkBA,MAAMC,kBAAkB,qBAAqBD,WAA7C;;AAEA,SAASE,SAAT,CAA+C;AAC7CrP,EAAAA,OAD6C;AAE7C1B,EAAAA,eAF6C;AAG7CC,EAAAA,wBAH6C;AAI7CuO,EAAAA,cAJ6C;AAK7CC,EAAAA,WAL6C;AAM7CC,EAAAA,mBAN6C;AAO7CrO,EAAAA,qBAP6C;AAQ7C2Q,EAAAA,eAR6C;AAS7CrC,EAAAA,UAT6C;AAU7CC,EAAAA,eAV6C;AAW7CC,EAAAA;AAX6C,CAA/C,EAY6B;QACrBoC,KAAK,GAAG;;OACT,IAAIC,KAAK,GAAG,GAAGA,KAAK,GAAGxP,OAAO,CAACW,QAAQ6O,KAAK,IAAI;UAC7CpT,MAAM,GAAG4D,OAAO,CAACwP,KAAD;UAChB3Q,OAAO,GAAGH,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,MAAAA,IAAI,EAAE;AAAR,KAAhC;;QACtB7B,OAAO,KAAKtD,WAAW;AACzBiU,MAAAA,KAAK,IAAI3Q,OAAO,GAAG,CAAnB2Q;;;AAGFD,IAAAA,KAAK,CAACvK,IAANuK,eACE9U,IAAC,UAAD;AAEE,MAAA,QAAQ2B,MAFV;AAGE,MAAA,SAASyC,OAHX;AAIE,MAAA,gBAAgByQ,eAAe,KAAKlT,MAAM,CAAC4C,GAJ7C;AAKE,MAAA,gBAAgB8N,cALlB;AAME,MAAA,iBAAiBxO,eANnB;AAOE,MAAA,0BAA0BC,wBAP5B;AAQE,MAAA,qBAAqByO,mBARvB;AASE,MAAA,aAAaD,WATf;AAUE,MAAA,YAAYE,UAVd;AAWE,MAAA,iBAAiBC,eAAe,IAAIsC,KAAK,KAAK,CAXhD;AAYE,MAAA,WAAWrC;AAZb,OACO/Q,MAAM,CAACC,GADd,CADFkT;;;sBAmBA9U;AACE,IAAA,MAAK,KADP;AAEE,qBAAe,CAFjB;eAGaF,IAAI,CAAC6U,kBAAD,EACWE,eAAe,KAAK,CAAC,CADhC,IACZpW,oBADY,CAHjB;AAME,IAAA,OAAO4J,WAAW,CAAC,CAAD,CANpB;AAAA,cAQGyM;AARH;;;AAaJ,iCAAeE,IAAI,CAACJ,SAAD,CAAnB;;;;;AC7FA,MAAMK,UAAU,sBAAhB;AAIA,MAAMC,mBAAmB,sBAAsBD,YAA/C;AAEA,MAAME,eAAe,uBAArB;AAQA,MAAMC,wBAAwB,4BAA4BD,iBAA1D;;AAEA,SAASE,IAAT,CAAqB;AACnB1T,EAAAA,MADmB;AAEnByC,EAAAA,OAFmB;AAGnB/C,EAAAA,cAHmB;AAInBiU,EAAAA,QAJmB;AAKnBC,EAAAA,aALmB;AAMnBjX,EAAAA,GANmB;AAOnBkX,EAAAA,UAPmB;AAQnBC,EAAAA,UARmB;AASnBC,EAAAA,gBATmB;AAUnBC,EAAAA,WAVmB;AAWnBnD,EAAAA,UAXmB;KAYhBnT;AAZgB,CAArB,EAa6B;QACrB;AAAEC,IAAAA,GAAF;AAAOqB,IAAAA,QAAP;AAAiB6M,IAAAA;AAAjB,MAA6BH,gBAAgB,CAAChM,cAAD;QAE7C;AAAEuU,IAAAA;AAAF,MAAgBjU;QAChBsR,SAAS,GAAGtK,gBAAgB,CAChChH,MADgC,EAMhC,OAAOiU,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACtX,GAAD,CAA3C,GAAmDsX,SANnB,EAGPN,QAHO,IAG7BJ,mBAH6B,EAIFK,aAJE,IAI7BH,wBAJ6B;;WASzBS,kBAAkBC,YAA6B;AACtDtD,IAAAA,UAAU,CAAClU,GAAD,EAAMqD,MAAN,EAAcmU,UAAd,CAAVtD;;;WAGOP,cAAc;AAAA;;AACrB4D,IAAAA,iBAAiB,0BAAClU,MAAM,CAACoU,aAAR,qBAACpU,sBAAsBqU,WAAvB,CAAjBH;AACAJ,IAAAA,UAAU,QAAVA,YAAAA,UAAU,CAAGnX,GAAH,EAAQqD,MAAR,CAAV8T;;;WAGOQ,oBAAoB;AAC3BJ,IAAAA,iBAAiB;;;WAGVK,oBAAoB;AAC3BL,IAAAA,iBAAiB,CAAC,IAAD,CAAjBA;AACAH,IAAAA,gBAAgB,QAAhBA,YAAAA,gBAAgB,CAAGpX,GAAH,EAAQqD,MAAR,CAAhB+T;;;sBAIA1V;AACE,IAAA,MAAK,UADP;AAEE,qBAAe2B,MAAM,CAAC4C,GAAP5C,GAAa,CAF9B;qBAGiBN,cAHjB;AAIE,oBAAc+C,OAJhB;AAKE,qBAAe,CAACuB,cAAc,CAAChE,MAAD,EAASrD,GAAT,CAAf,IAAgCwC,SALjD;AAME,IAAA,KAAKxB,GANP;AAOE,IAAA,UAAUqB,QAPZ;AAQE,IAAA,WAAWsS,SARb;AASE,IAAA,OAAO1K,YAAY,CAAC5G,MAAD,EAASyC,OAAT,CATrB;AAUE,IAAA,SAAS6N,WAVX;AAWE,IAAA,eAAeiE,iBAXjB;AAYE,IAAA,eAAeD,iBAZjB;AAaE,IAAA,SAASzI,OAbX;AAAA,OAcMnO,KAdN;AAAA,cAgBG,CAACsC,MAAM,CAACkE,QAAR,iBACChG;AAAA,8BACEG,IAAC,MAAD,CAAQ,SAAR;AACE,QAAA,QAAQ2B,MADV;AAEE,QAAA,KAAKrD,GAFP;AAGE,QAAA,gBAAgB+C,cAHlB;AAIE,QAAA,aAAasU;AAJf,QADF,EAOGH,UAPH;AAAA;AAjBJ;;;AA+BJ,4BAAeR,IAAI,CAACK,IAAD,CAAnB;;ACzFA,SAASc,GAAT,CACE;AACElD,EAAAA,SADF;AAEEvN,EAAAA,MAFF;AAGE0Q,EAAAA,YAHF;AAIE9N,EAAAA,MAJF;AAKEuM,EAAAA,eALF;AAME5R,EAAAA,aANF;AAOEoT,EAAAA,aAPF;AAQEC,EAAAA,kBARF;AASEpS,EAAAA,qBATF;AAUE5F,EAAAA,GAVF;AAWEyP,EAAAA,eAXF;AAYEwI,EAAAA,kBAZF;AAaEC,EAAAA,sBAbF;AAcEf,EAAAA,UAdF;AAeEC,EAAAA,gBAfF;AAgBEe,EAAAA,QAhBF;AAiBEC,EAAAA,oBAjBF;AAkBEC,EAAAA,YAlBF;AAmBEhB,EAAAA,WAnBF;AAoBEnD,EAAAA,UApBF;AAqBE,KAAGnT;AArBL,CADF,EAwBEC,GAxBF,EAyBE;AACA,QAAMsX,eAAe,GAAG1J,aAAa,CAAE2J,MAAD,IAAe;AACnDlB,IAAAA,WAAW,CAACjQ,MAAD,EAASmR,MAAT,CAAX;AACD,GAFoC,CAArC;;AAIA,WAASC,eAAT,CAAyBhS,KAAzB,EAAkE;AAChE4R,IAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAGhR,MAAH,CAApB;AACAiR,IAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAG7R,KAAH,CAAZ;AACD;;AAEDmO,EAAAA,SAAS,GAAGnT,IAAI,CACdvB,YADc,EAEb,WAAUmH,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAF/B,EAMd+Q,QANc,oBAMdA,QAAQ,CAAGnY,GAAH,CANM,EAOd2U,SAPc,EAIY4B,eAAe,KAAK,CAAC,CAJjC,IAIXpW,oBAJW,CAAhB;AAUA,QAAMqW,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGhH,eAAe,CAAC7H,MAA5C,EAAoD6O,KAAK,EAAzD,EAA6D;AAC3D,UAAMpT,MAAM,GAAGoM,eAAe,CAACgH,KAAD,CAA9B;AACA,UAAM;AAAExQ,MAAAA;AAAF,QAAU5C,MAAhB;AACA,UAAMyC,OAAO,GAAGH,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,MAAAA,IAAI,EAAE,KAAR;AAAe3H,MAAAA;AAAf,KAAhC,CAA1B;;AACA,QAAI8F,OAAO,KAAKtD,SAAhB,EAA2B;AACzBiU,MAAAA,KAAK,IAAI3Q,OAAO,GAAG,CAAnB;AACD;;AAED,UAAM/C,cAAc,GAAGwT,eAAe,KAAKtQ,GAA3C;;AAEA,QAAIlD,cAAc,IAAIkV,kBAAtB,EAA0C;AACxCzB,MAAAA,KAAK,CAACvK,IAAN,CAAWgM,kBAAX;AACD,KAFD,MAEO;AACLzB,MAAAA,KAAK,CAACvK,IAAN,eACEvK,IAACqV,MAAD;AAEE,QAAA,MAAM,EAAE1T,MAFV;AAGE,QAAA,OAAO,EAAEyC,OAHX;AAIE,QAAA,GAAG,EAAE9F,GAJP;AAKE,QAAA,QAAQ,EAAE+X,aAAa,KAAK9R,GAL9B;AAME,QAAA,aAAa,EAAE+R,kBAAkB,KAAK/R,GANxC;AAOE,QAAA,cAAc,EAAElD,cAPlB;AAQE,QAAA,UAAU,EAAEA,cAAc,GAAGmV,sBAAH,GAA4B1V,SARxD;AASE,QAAA,UAAU,EAAE2U,UATd;AAUE,QAAA,gBAAgB,EAAEC,gBAVpB;AAWE,QAAA,WAAW,EAAEkB,eAXf;AAYE,QAAA,UAAU,EAAEpE;AAZd,SACO7Q,MAAM,CAACC,GADd,CADF;AAgBD;AACF;;AAED,sBACE5B,IAAC,oBAAD;AAAsB,IAAA,KAAK,EAAEiD,aAA7B;AAAA,2BACEjD;AACE,MAAA,IAAI,EAAC,KADP;AAEE,MAAA,GAAG,EAAEV,GAFP;AAGE,MAAA,SAAS,EAAE2T,SAHb;AAIE,MAAA,YAAY,EAAE6D,eAJhB;AAKE,MAAA,KAAK,EAAEzO,WAAW,CAAC+N,YAAD,EAAe9N,MAAf,CALpB;AAAA,SAMMjJ,KANN;AAAA,gBAQGyV;AARH;AADF,IADF;AAcD;;AAED,2BAAeE,IAAI,eAAC7V,UAAU,CAACgX,GAAD,CAAX,CAAnB;;ACtFA,SAASY,SAAT,CAA0B;AACxBjH,EAAAA,EADwB;AAExB5N,EAAAA,QAFwB;AAGxBgN,EAAAA,SAHwB;AAIxB/M,EAAAA,UAJwB;AAKxBd,EAAAA,cALwB;AAMxBM,EAAAA,MANwB;AAOxBrD,EAAAA,GAPwB;AAQxB0Y,EAAAA,gBARwB;AASxB5U,EAAAA,WAAW,EAAE6U;AATW,CAA1B,EAU0B;AACxB,QAAM;AAAE3X,IAAAA,GAAF;AAAOqB,IAAAA,QAAP;AAAiB6M,IAAAA;AAAjB,MAA6BH,gBAAgB,CAAChM,cAAD,CAAnD;;AAEA,WAASe,WAAT,GAAuB;AACrB6U,IAAAA,kBAAkB,CAACnH,EAAD,CAAlB;AACD;;AAGD,QAAMoH,eAAe,GAAGvV,MAAM,CAACkE,QAAP,IAAmBmR,gBAAgB,KAAKrV,MAAM,CAAC4C,GAAvE;AAEA,sBACEvE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAe2B,MAAM,CAAC4C,GAAP,GAAa,CAF9B;AAGE,qBAAelD,cAHjB;AAIE,IAAA,GAAG,EAAE/B,GAJP;AAKE,IAAA,QAAQ,EAAEqB,QALZ;AAOE,IAAA,SAAS,EAAEgI,gBAAgB,CAAChH,MAAD,CAP7B;AAQE,IAAA,KAAK,EAAE,EACL,GAAG4G,YAAY,CAAC5G,MAAD,CADV;AAELwV,MAAAA,MAAM,EAAED,eAAe,GAAG,SAAH,GAAe;AAFjC,KART;AAYE,IAAA,OAAO,EAAEA,eAAe,GAAG9U,WAAH,GAAiBtB,SAZ3C;AAaE,IAAA,OAAO,EAAE0M,OAbX;AAAA,cAeG,CAAC,CAAC7L,MAAM,CAACkE,QAAR,IAAoBmR,gBAAgB,KAAKrV,MAAM,CAAC4C,GAAjD,KAAyD5C,MAAM,CAACqC,cAAhE,iBACChE,IAAC,MAAD,CAAQ,cAAR;AACE,MAAA,QAAQ,EAAEkC,QADZ;AAEE,MAAA,SAAS,EAAEgN,SAFb;AAGE,MAAA,MAAM,EAAEvN,MAHV;AAIE,MAAA,GAAG,EAAErD,GAJP;AAKE,MAAA,UAAU,EAAE6D,UALd;AAME,MAAA,cAAc,EAAEd,cANlB;AAOE,MAAA,WAAW,EAAEe;AAPf;AAhBJ,KAMOT,MAAM,CAACC,GANd,CADF;AA6BD;;AAED,iCAAeoT,IAAI,CAAC+B,SAAD,CAAnB;;;;;ACzCA,MAAMhH,QAAQ,sBAAd;AAUA,MAAMqH,iBAAiB,oBAAoBrH,UAA3C;;AAEA,SAASsH,UAAT,CAA2B;AACzBvH,EAAAA,EADyB;AAEzB5N,EAAAA,QAFyB;AAGzB6L,EAAAA,eAHyB;AAIzBmB,EAAAA,SAJyB;AAKzBxJ,EAAAA,MALyB;AAMzBpH,EAAAA,GANyB;AAOzB8X,EAAAA,YAPyB;AAQzB9N,EAAAA,MARyB;AASzBqH,EAAAA,KATyB;AAUzBxN,EAAAA,UAVyB;AAWzB0S,EAAAA,eAXyB;AAYzB5R,EAAAA,aAZyB;AAazBqU,EAAAA,WAbyB;AAczBlV,EAAAA,WAdyB;KAetB/C;AAfsB,CAA3B,EAgBiC;QAEzBkF,GAAG,GAAGwJ,eAAe,CAAC,CAAD,CAAfA,CAAmBnM,GAAnBmM,KAA2BhL,iBAA3BgL,GAA+C4B,KAAK,GAAG,CAAvD5B,GAA2D4B;;WAE9D4H,oBAAoB;AAC3BD,IAAAA,WAAW,CAAC5R,MAAD,CAAX4R;;;sBAIAtX,IAAC,oBAAD;AAAsB,IAAA,OAAOiD,aAA7B;AAAA,2BACEjD;AACE,MAAA,MAAK,KADP;AAEE,oBAAY2P,KAFd;AAGE,uBAAexN,UAHjB;AAIE,MAAA,WAAWrC,IAAI,CACbvB,YADa,EAEb6Y,iBAFa,aAGF1R,MAAM,GAAG,CAATA,KAAe,CAAfA,GAAmB,MAAnBA,GAA4B,OAH1B,EAKamP,eAAe,KAAK,CAAC,CALlC,IAKVpW,oBALU,CAJjB;AAYE,MAAA,SAAS8Y,iBAZX;AAaE,MAAA,OAAOlP,WAAW,CAAC+N,YAAD,EAAe9N,MAAf,CAbpB;AAAA,SAcMjJ,KAdN;AAAA,gBAgBG0O,eAAe,CAAClE,GAAhBkE,CAAqBpM,MAAD,iBACnB3B,IAAC+W,WAAD;AAEE,QAAA,IAAIjH,EAFN;AAGE,QAAA,UAAU5N,QAHZ;AAIE,QAAA,WAAWgN,SAJb;AAKE,QAAA,YAAY/M,UALd;AAME,QAAA,gBAAgB0S,eAAe,KAAKlT,MAAM,CAAC4C,GAN7C;AAOE,QAAA,QAAQ5C,MAPV;AAQE,QAAA,KAAKrD,GARP;AASE,QAAA,kBAAkBiG,GATpB;AAUE,QAAA,aAAanC;AAVf,SACOT,MAAM,CAACC,GADd,CADDmM;AAhBH;AADF;;;AAoCJ,sCAAeiH,IAAI,CAACqC,UAAD,CAAnB;;;;;AC/FO,MAAMG,oBAAoB,uBAA1B;;AAcP,SAASC,WAAT,CAA4B;AAC1B9V,EAAAA,MAD0B;AAE1ByC,EAAAA,OAF0B;AAG1B9F,EAAAA,GAH0B;AAI1B+C,EAAAA,cAJ0B;AAK1BmR,EAAAA;AAL0B,CAA5B,EAM4B;QACpB;AAAElT,IAAAA,GAAF;AAAOqB,IAAAA,QAAP;AAAiB6M,IAAAA;AAAjB,MAA6BH,gBAAgB,CAAChM,cAAD;QAC7C;AAAEqW,IAAAA,gBAAgB,EAAEC,gBAApB;AAAsCC,IAAAA;AAAtC,MAA2DjW;QAC3DsR,SAAS,GAAGtK,gBAAgB,CAChChH,MADgC,EAEhC6V,oBAFgC,EAGhC,OAAOI,gBAAP,KAA4B,UAA5B,GAAyCA,gBAAgB,CAACtZ,GAAD,CAAzD,GAAiEsZ,gBAHjC;;WAMzBrD,UAAU;AACjB/B,IAAAA,UAAU,CAAClU,GAAD,EAAMqD,MAAN,CAAV6Q;;;sBAIAxS;AACE,IAAA,MAAK,UADP;AAEE,qBAAe2B,MAAM,CAAC4C,GAAP5C,GAAa,CAF9B;AAGE,oBAAcyC,OAHhB;AAIE,qBAAe/C,cAJjB;AAKE,IAAA,KAAK/B,GALP;AAME,IAAA,UAAUqB,QANZ;AAOE,IAAA,WAAWsS,SAPb;AAQE,IAAA,OAAO1K,YAAY,CAAC5G,MAAD,EAASyC,OAAT,CARrB;AASE,IAAA,SAASmQ,OATX;AAUE,IAAA,SAAS/G,OAVX;AAAA,cAYGmK,gBAAgB,iBACf3X,IAAC,gBAAD;AAAkB,MAAA,QAAQ2B,MAA1B;AAAkC,MAAA,KAAKrD,GAAvC;AAA4C,MAAA,gBAAgB+C;AAA5D;AAbJ;;;AAmBJ,mCAAe2T,IAAI,CAACyC,WAAD,CAAnB;;;;;ACpCA,MAAMI,UAAU,sBAAhB;AASA,MAAMC,yBAAyB,uBAA/B;AAMA,MAAMC,mBAAmB,sBAAsBF,YAA/C;;AAEA,SAASG,UAAT,CAA2B;AACzBtS,EAAAA,MADyB;AAEzB0Q,EAAAA,YAFyB;AAGzB9X,EAAAA,GAHyB;AAIzByP,EAAAA,eAJyB;AAKzB4C,EAAAA,GALyB;AAMzBsH,EAAAA,MANyB;AAOzB/T,EAAAA,qBAPyB;AAQzB2Q,EAAAA,eARyB;AASzBrC,EAAAA,UATyB;mBAUR0F;AAVQ,CAA3B,EAW2B;QACnBpD,KAAK,GAAG;;OACT,IAAIC,KAAK,GAAG,GAAGA,KAAK,GAAGhH,eAAe,CAAC7H,QAAQ6O,KAAK,IAAI;UACrDpT,MAAM,GAAGoM,eAAe,CAACgH,KAAD;UACxB3Q,OAAO,GAAGH,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,MAAAA,IAAI,EAAE,SAAR;AAAmB3H,MAAAA;AAAnB,KAAhC;;QACtB8F,OAAO,KAAKtD,WAAW;AACzBiU,MAAAA,KAAK,IAAI3Q,OAAO,GAAG,CAAnB2Q;;;UAGI1T,cAAc,GAAGwT,eAAe,KAAKlT,MAAM,CAAC4C;AAElDuQ,IAAAA,KAAK,CAACvK,IAANuK,eACE9U,IAACyX,aAAD;AAEE,MAAA,QAAQ9V,MAFV;AAGE,MAAA,SAASyC,OAHX;AAIE,MAAA,KAAK9F,GAJP;AAKE,MAAA,gBAAgB+C,cALlB;AAME,MAAA,YAAYmR;AANd,OACO7Q,MAAM,CAACC,GADd,CADFkT;;;sBAaA9U;AACE,IAAA,MAAK,KADP;AAEE,qBAAekY,YAFjB;AAGE,IAAA,WAAWpY,IAAI,CACbvB,YADa,aAEFmH,MAAM,GAAG,CAATA,KAAe,CAAfA,GAAmB,MAAnBA,GAA4B,OAF1B,EAGbqS,mBAHa,EAIkBrS,MAAM,KAAK,CAJ7B,IAIVoS,yBAJU,EAMajD,eAAe,KAAK,CAAC,CANlC,IAMVpW,oBANU,CAHjB;AAYE,IAAA,SAEI,GAAG4J,WAAW,CAAC+N,YAAD;+BACWzF,GAAG,KAAK7P,SAAR6P,MAAuBA,OAAvBA,GAAiC7P;kCAC9BmX,MAAM,KAAKnX,SAAXmX,MAA0BA,UAA1BA,GAAuCnX;KAhBzE;AAAA,cAoBGgU;AApBH;;;AAyBJ,kCAAeE,IAAI,CAACgD,UAAD,CAAnB;;;;;AC9EA,MAAMG,WAAW,uBAAjB;AAee,SAASC,QAAT,CAAyB;AACtCzW,EAAAA,MADsC;AAEtCyC,EAAAA,OAFsC;AAGtC9F,EAAAA,GAHsC;AAItCqX,EAAAA,WAJsC;AAKtC0C,EAAAA,WALsC;AAMtCC,EAAAA;AANsC,CAAzB,EAOU;AAAA;;QACjBC,eAAe,GAAGhY,MAAM;QACxBiY,oBAAoB,GAAG7W,0BAAAA,MAAM,CAACoU,aAAPpU,2CAAsB6W,oBAAtB7W,MAA+C;QAKtE8W,wBAAwB,GAAGvL,aAAa,CAAC,MAAM;AACnDwL,IAAAA,OAAO,CAAC,IAAD,CAAPA;AAD4C,GAAA;AAI9CvY,EAAAA,SAAS,CAAC,MAAM;QACV,CAACqY,sBAAsB;;aAElBG,2BAA2B;AAClCJ,MAAAA,eAAe,CAAC/X,OAAhB+X,GAA0BK,qBAAqB,CAACH,wBAAD,CAA/CF;;;AAGFvE,IAAAA,gBAAgB,CAAC,WAAD,EAAc2E,wBAAd,EAAwC;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAxC,CAAhB7E;WAEO,MAAM;AACXF,MAAAA,mBAAmB,CAAC,WAAD,EAAc6E,wBAAd,EAAwC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAxC,CAAnB/E;AACAgF,MAAAA,kBAAkB;AAFpB;AATO,GAAA,EAaN,CAACN,oBAAD,EAAuBC,wBAAvB,CAbM,CAATtY;;WAeS2Y,qBAAqB;AAC5BC,IAAAA,oBAAoB,CAACR,eAAe,CAAC/X,OAAjB,CAApBuY;;;WAGOC,UAAUlU,OAA4C;QACzDA,KAAK,CAAClD,GAANkD,KAAc,UAAU;AAC1BA,MAAAA,KAAK,CAACmU,eAANnU;AAEA4T,MAAAA,OAAO;AAHT,WAIO,IAAI5T,KAAK,CAAClD,GAANkD,KAAc,OAAlB,EAA2B;AAChCA,MAAAA,KAAK,CAACmU,eAANnU;AACA4T,MAAAA,OAAO,CAAC,IAAD,CAAPA;AACAJ,MAAAA,YAAY;AAHP,KAAA,MAIA;AAAA;;YACCY,YAAY,uDAAGvX,MAAM,CAACoU,aAAV,qBAAGpU,uBAAsBuX,YAAzB,qCAAyClU;;UACvD,CAACkU,YAAY,CAACpU,KAAD,GAAS;AACxBA,QAAAA,KAAK,CAACmU,eAANnU;;;;;WAKG4T,QAAQS,eAAyB;QACpCA,eAAe;AACjBxD,MAAAA,WAAW,CAACrX,GAAD,EAAM,IAAN,CAAXqX;AADF,WAEO;AACL0C,MAAAA,WAAW;;;;QAIT;AAAEzC,IAAAA;AAAF,MAAgBjU;QAChBsR,SAAS,GAAGtK,gBAAgB,CAChChH,MADgC,EAEhC,sBAFgC,EAIhC,OAAOiU,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACtX,GAAD,CAA3C,GAAmDsX,SAJnB,EAGhC,4BAACjU,MAAM,CAACoU,aAAR,aAACpU,uBAAsByX,eAAvB,CAHgC,IAGUjB,WAHV;sBAQhCnY;AACE,IAAA,MAAK,UADP;AAEE,qBAAe2B,MAAM,CAAC4C,GAAP5C,GAAa,CAF9B;oBAGgByC,OAHhB;AAIE,yBAJF;AAKE,IAAA,WAAW6O,SALb;AAME,IAAA,OAAO1K,YAAY,CAAC5G,MAAD,EAASyC,OAAT,CANrB;AAOE,IAAA,WAAW4U,SAPb;AAQE,IAAA,oBAAoBR,oBAAoB,GAAGM,kBAAH,GAAwBhY,SARlE;AAAA,cAUGa,MAAM,CAACiE,MAAPjE,IAAiB,IAAjBA,iBACC9B;AAAA,8BACEG,IAAC,MAAD,CAAQ,MAAR;AAAe,QAAA,QAAQ2B,MAAvB;AAA+B,QAAA,KAAKrD,GAApC;AAAyC,QAAA,aAAaqX,WAAtD;AAAmE,QAAA,SAAS+C;AAA5E,QADF,EAEG/W,2BAAAA,MAAM,CAACoU,aAAPpU,4CAAsByX,eAAtBzX,kBACC3B,IAAC,MAAD,CAAQ,SAAR;AAAkB,QAAA,QAAQ2B,MAA1B;AAAkC,QAAA,KAAKrD,GAAvC;AAA4C,QAAA,cAA5C,MAAA;AAA2D,QAAA,aAAaqX;AAAxE,QAHJ;AAAA;AAXJ;;;;;;ACxGJ,MAAM0D,cAAc,sBAApB;AAiBA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;AAYe,SAASE,UAAT,CAA2B;AACxC/T,EAAAA,IADwC;AAExCD,EAAAA,OAFwC;AAGxCD,EAAAA,gBAHwC;AAIxCkU,EAAAA,uBAJwC;AAKxC7T,EAAAA,cALwC;AAMxC8T,EAAAA,YANwC;AAOxCC,EAAAA,MAPwC;AAQxCC,EAAAA,WARwC;AASxCjD,EAAAA;AATwC,CAA3B,EAUE;WACNkD,gBAAgB9U,OAAqD;QACxEA,KAAK,CAACwO,OAANxO,KAAkB,GAAG;AACzB6U,IAAAA,WAAW,CAAC,IAAD,CAAXA;AACAzZ,IAAAA,MAAM,CAAC8T,gBAAP9T,CAAwB,WAAxBA,EAAqC2Z,WAArC3Z;AACAA,IAAAA,MAAM,CAAC8T,gBAAP9T,CAAwB,SAAxBA,EAAmC4Z,SAAnC5Z;;aAES2Z,YAAY/U,OAAmB;UAIlCA,KAAK,CAACwO,OAANxO,KAAkB,GAAGgV,SAAS;;;aAG3BA,YAAY;AACnB5Z,MAAAA,MAAM,CAAC4T,mBAAP5T,CAA2B,WAA3BA,EAAwC2Z,WAAxC3Z;AACAA,MAAAA,MAAM,CAAC4T,mBAAP5T,CAA2B,SAA3BA,EAAsC4Z,SAAtC5Z;AACAyZ,MAAAA,WAAW,CAAC,KAAD,CAAXA;AACAI,MAAAA,aAAa;;;;WAIRA,gBAAgB;UACjBC,UAAU,GAAGR,uBAAuB,CAAChZ;QACvCwZ,UAAU,KAAKlZ,WAAW;UAExB;AAAE4E,MAAAA;AAAF,QAAaJ;UACbyJ,aAAa,GAAGrJ,MAAM,GAAGsU,UAATtU,GAAsBA,MAAM,GAAG,CAA/BA,GAAmCsU;UACnDC,WAAW,GAAGvU,MAAM,GAAGsU,UAATtU,GAAsBsU,UAAU,GAAG,CAAnCtU,GAAuCA;AAC3DwU,IAAAA,UAAU,CAACnL,aAAD,EAAgBkL,WAAhB,CAAVC;AACAxD,IAAAA,oBAAoB,CAAC5V,SAAD,CAApB4V;;;WAGOR,kBAAkBpR,OAAyC;AAClEA,IAAAA,KAAK,CAACmU,eAANnU;AACAoV,IAAAA,UAAU,CAAC5U,gBAAgB,CAACI,MAAjBJ,GAA0B,CAA3B,EAA8BE,IAAI,CAACU,MAAnC,CAAVgU;;;WAGOA,WAAWC,aAAqBC,WAAmB;UACpD;AAAE7V,MAAAA,GAAF;AAAOmB,MAAAA;AAAP,QAAkBJ;UAClB3D,MAAM,GAAG4D,OAAO,CAAChB,GAAD;UAChB8V,SAAS,GAAG7U,IAAI,CAACE,MAAD;UAChB4U,WAAW,GAAG,CAAC,GAAG9U,IAAJ;UACd+U,OAAiB,GAAG;;SACrB,IAAI9O,CAAC,GAAG0O,aAAa1O,CAAC,GAAG2O,WAAW3O,CAAC,IAAI;UACxC9F,cAAc,CAAC;AAAED,QAAAA,MAAM,EAAE+F,CAAV;AAAalH,QAAAA;AAAb,OAAD,GAAsB;cAChCiW,UAAU,GAAGd,MAAM,CAAC;AAAE5G,UAAAA,SAAS,EAAEnR,MAAM,CAACC,GAApB;AAAyByY,UAAAA,SAAzB;AAAoCI,UAAAA,SAAS,EAAEjV,IAAI,CAACiG,CAAD;AAAnD,SAAD;;YACrB+O,UAAU,KAAKhV,IAAI,CAACiG,CAAD,GAAK;AAC1B6O,UAAAA,WAAW,CAAC7O,CAAD,CAAX6O,GAAiBE,UAAjBF;AACAC,UAAAA,OAAO,CAAChQ,IAARgQ,CAAa9O,CAAb8O;;;;;QAKFA,OAAO,CAACrU,MAARqU,GAAiB,GAAG;AACtBd,MAAAA,YAAY,QAAZA,YAAAA,YAAY,CAAGa,WAAH,EAAgB;AAAEC,QAAAA,OAAF;AAAW5Y,QAAAA;AAAX,OAAhB,CAAZ8X;;;;sBAKFzZ;AACE,IAAA,WAAWsZ,uBADb;AAEE,IAAA,aAAaM,eAFf;AAGE,IAAA,eAAe1D;AAHjB;;;;;;ACrGJ,MAAMwE,KAAK,sBAAX;AAQA,MAAMC,cAAc,qBAAqBD,OAAzC;AAEe,SAAS5I,QAAT,CAAkB;AAAEL,EAAAA;AAAF,CAAlB,EAAoD;SAC1DA,aAAa,KAAK3Q,SAAlB2Q,gBACLzR;AAAK,IAAA,SAAQ,UAAb;AAAwB,IAAA,OAAM,IAA9B;AAAmC,IAAA,QAAO,GAA1C;AAA8C,IAAA,WAAW2a,cAAzD;AAAyE,uBAAzE;AAAA,2BACE3a;AAAM,MAAA,GAAGyR,aAAa,KAAK,KAAlBA,GAA0B,eAA1BA,GAA4C;AAArD;AADF,IADKA,GAIH;;;AC2DN,MAAMmJ,eAAgC,GAAG;AACvCrW,EAAAA,GAAG,EAAE,CAAC,CADiC;AAEvCmB,EAAAA,MAAM,EAAE,CAAC,CAF8B;AAGvCmV,EAAAA,IAAI,EAAE;AAHiC,CAAzC;;AA6GA,SAASC,QAAT,CACE;AAEEvV,EAAAA,OAAO,EAAEwD,UAFX;AAGEvD,EAAAA,IAAI,EAAE6I,OAHR;AAIErI,EAAAA,WAJF;AAKE+U,EAAAA,YALF;AAMEtB,EAAAA,YANF;AAQEnL,EAAAA,SARF;AASE0M,EAAAA,eAAe,EAAEC,kBATnB;AAUEC,EAAAA,gBAAgB,EAAEC,mBAVpB;AAYEC,EAAAA,YAZF;AAaEC,EAAAA,oBAbF;AAcE/I,EAAAA,WAdF;AAeEC,EAAAA,mBAfF;AAgBEpJ,EAAAA,oBAhBF;AAiBEQ,EAAAA,OAAO,EAAEP,UAjBX;AAkBEoF,EAAAA,UAlBF;AAmBEC,EAAAA,gBAnBF;AAoBE6M,EAAAA,wBApBF;AAsBE7F,EAAAA,UAtBF;AAuBEC,EAAAA,gBAvBF;AAwBE6F,EAAAA,QAxBF;AAyBElJ,EAAAA,cAzBF;AA0BEqH,EAAAA,MA1BF;AA2BE8B,EAAAA,MA3BF;AA4BEC,EAAAA,OA5BF;AA8BErV,EAAAA,kBAAkB,EAAEsV,qBA9BtB;AA+BErS,EAAAA,oBA/BF;AAiCEsS,EAAAA,UAjCF;AAkCE1I,EAAAA,SAlCF;AAmCE2I,EAAAA,KAnCF;AAoCEnF,EAAAA,QApCF;AAqCE/D,EAAAA,SArCF;AAuCE,gBAAcpR,SAvChB;AAwCE,qBAAmBC,cAxCrB;AAyCE,sBAAoBsa,eAzCtB;AA0CE,iBAAeC;AA1CjB,CADF,EA6CExc,GA7CF,EA8CE;AAAA;;AAIA,QAAMyc,iBAAiB,GAAG9a,oBAAoB,EAA9C;AACA,gBAAAqN,SAAS,SAAT,gBAAAA,SAAS,GAAK,EAAd;AACA,QAAM0M,eAAe,GAAGC,kBAAH,WAAGA,kBAAH,GAA0B,OAAO3M,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4C,EAA3F;AACA,QAAM4M,gBAAgB,GAAGC,mBAAH,WAAGA,mBAAH,GAA2B,OAAO7M,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4C,EAA7F;AACA,QAAM0N,WAAW,oCAAGL,UAAH,oBAAGA,UAAU,CAAEM,WAAf,oCAA8BF,iBAA9B,oBAA8BA,iBAAiB,CAAEE,WAAjD,mBAAgE9F,KAAjF;AACA,QAAMpE,QAAQ,oCAAG4J,UAAH,oBAAGA,UAAU,CAAE5J,QAAf,mCAA2BgK,iBAA3B,oBAA2BA,iBAAiB,CAAEhK,QAA9C,oBAA0DD,QAAxE;AACA,QAAMrQ,iBAAiB,qCACrBka,UADqB,oBACrBA,UAAU,CAAEla,iBADS,oCACYsa,iBADZ,oBACYA,iBAAiB,CAAEta,iBAD/B,oBACoDvC,iBAD3E;AAEA,QAAMgd,cAAc,4BAAGP,UAAH,oBAAGA,UAAU,CAAEO,cAAf,oCAAiCH,iBAAjC,oBAAiCA,iBAAiB,CAAEG,cAAxE;AACA,QAAM9V,kBAAkB,GAAGsV,qBAAH,WAAGA,qBAAH,GAA4B,MAApD;AACA,2BAAArS,oBAAoB,SAApB,2BAAAA,oBAAoB,GAAK,IAAzB;AACA,gBAAAqJ,SAAS,SAAT,gBAAAA,SAAS,GAAK,KAAd;AAKA,QAAM,CAACnE,SAAD,EAAY4N,YAAZ,IAA4B3P,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACtD,UAAD,EAAakT,aAAb,IAA8B5P,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACxD,YAAD,EAAeqT,eAAf,IAAkC7P,QAAQ,CAA8B,MAAM,IAAI5B,GAAJ,EAApC,CAAhD;AACA,QAAM,CAACtF,gBAAD,EAAmBgX,mBAAnB,IAA0C9P,QAAQ,CACtDoO,eADsD,CAAxD;AAGA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8BhQ,QAAQ,CAAuC,IAAvC,CAA5C;AACA,QAAM,CAACiQ,UAAD,EAAa9C,WAAb,IAA4BnN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACkQ,iBAAD,EAAoBC,aAApB,IAAqCnQ,QAAQ,CAAqB1L,SAArB,CAAnD;AACA,QAAM,CAAC8b,gBAAD,EAAmBC,mBAAnB,IAA0CrQ,QAAQ,CAAiC,IAAjC,CAAxD;AAKA,QAAMsQ,oBAAoB,GAAGvc,MAAM,CAAC+E,gBAAD,CAAnC;AACA,QAAMkU,uBAAuB,GAAGjZ,MAAM,CAACmc,iBAAD,CAAtC;AACA,QAAMK,kBAAkB,GAAGxc,MAAM,CAAC,CAAC,CAAF,CAAjC;AACA,QAAMyc,MAAM,GAAGzc,MAAM,CAAiB,IAAjB,CAArB;AAKA,QAAM,CAAC8L,OAAD,EAAUC,SAAV,EAAqBG,UAArB,IAAmCL,iBAAiB,EAA1D;AACA,QAAM6Q,eAAe,GAAG,CAAxB;AACA,QAAMC,gBAAgB,0BAAGlX,WAAH,oBAAGA,WAAW,CAAEE,MAAhB,kCAA0B,CAAhD;AACA,QAAM4G,YAAY,GAAGL,UAAU,GAAGuO,eAAb,GAA+BkC,gBAAgB,GAAGhC,gBAAvE;AACA,QAAMiC,YAAY,GAAG/B,YAAY,IAAI,IAAhB,IAAwBC,oBAAoB,IAAI,IAArE;AACA,QAAM+B,mBAAmB,GAAG9X,gBAAgB,CAACI,MAAjB,KAA4B,CAAC,CAAzD;AACA,QAAMiN,KAAK,GAAGD,SAAS,KAAK,KAA5B;AACA,QAAM2K,OAAO,GAAG1K,KAAK,GAAG,YAAH,GAAkB,WAAvC;AACA,QAAM2K,QAAQ,GAAG3K,KAAK,GAAG,WAAH,GAAiB,YAAvC;AAEA,QAAM4K,qBAAqB,GAAG3T,OAAO,CACnC,OAAO;AACLmI,IAAAA,QADK;AAELtQ,IAAAA;AAFK,GAAP,CADmC,EAKnC,CAACsQ,QAAD,EAAWtQ,iBAAX,CALmC,CAArC;AAQA,QAAMoC,eAAe,GAAG+F,OAAO,CAAC,MAAe;AAE7C,UAAM;AAAE1D,MAAAA;AAAF,QAAamI,OAAnB;AACA,WACEnI,MAAM,KAAK,CAAX,IACAkV,YAAY,IAAI,IADhB,IAEAL,YAAY,IAAI,IAFhB,IAGAK,YAAY,CAACoC,IAAb,IAAqBtX,MAHrB,IAIAmI,OAAO,CAACoP,KAAR,CAAenf,GAAD,IAAS8c,YAAY,CAACrW,GAAb,CAAiBgW,YAAY,CAACzc,GAAD,CAA7B,CAAvB,CALF;AAOD,GAV8B,EAU5B,CAAC+P,OAAD,EAAU+M,YAAV,EAAwBL,YAAxB,CAV4B,CAA/B;AAYA,QAAM;AACJxV,IAAAA,OADI;AAEJc,IAAAA,cAFI;AAGJqF,IAAAA,mBAHI;AAIJC,IAAAA,iBAJI;AAKJnB,IAAAA,aALI;AAMJG,IAAAA,aANI;AAOJF,IAAAA,gBAPI;AAQJvG,IAAAA,qBARI;AASJwG,IAAAA,sBATI;AAUJf,IAAAA;AAVI,MAWFb,oBAAoB,CAAC;AACvBC,IAAAA,UADuB;AAEvBC,IAAAA,YAFuB;AAGvBE,IAAAA,UAHuB;AAIvBD,IAAAA,aAAa,EAAEqD,SAJQ;AAKvBnD,IAAAA,oBALuB;AAMvBC,IAAAA,UAAU,EAAEoF,UAAU,GAAGpF,UAAH,GAAgBtI,SANf;AAOvBuI,IAAAA;AAPuB,GAAD,CAXxB;AAqBA,QAAM;AACJsE,IAAAA,mBADI;AAEJC,IAAAA,iBAFI;AAGJpI,IAAAA,IAHI;AAIJmJ,IAAAA,SAJI;AAKJuB,IAAAA,cALI;AAMJC,IAAAA,gBANI;AAOJ1K,IAAAA,UAPI;AAQJ2K,IAAAA,SARI;AASJC,IAAAA,YATI;AAUJC,IAAAA;AAVI,MAWFlC,eAAe,CAAC;AAClBC,IAAAA,OADkB;AAElB1E,IAAAA,OAFkB;AAGlB6E,IAAAA,UAHkB;AAIlBF,IAAAA,SAJkB;AAKlBxB,IAAAA,YALkB;AAMlByB,IAAAA,SANkB;AAOlBE,IAAAA,gBAPkB;AAQlBpF,IAAAA;AARkB,GAAD,CAXnB;AAsBA,QAAM0E,eAAe,GAAGL,kBAAkB,CAAC;AACzCnI,IAAAA,OADyC;AAEzCc,IAAAA,cAFyC;AAGzCqF,IAAAA,mBAHyC;AAIzCC,IAAAA,iBAJyC;AAKzCzH,IAAAA,qBALyC;AAMzCyJ,IAAAA,mBANyC;AAOzCC,IAAAA,iBAPyC;AAQzCpI,IAAAA,IARyC;AASzCQ,IAAAA,WATyC;AAUzCP,IAAAA;AAVyC,GAAD,CAA1C;AAaA,QAAMiY,SAAS,GAAG/T,OAAO,CAACzD,MAAR,GAAiB,CAAjB,IAAsB,OAAOsI,UAAP,KAAsB,UAA9D;AACA,QAAMmP,SAAS,GAAGD,SAAS,GAAG,CAAC,CAAJ,GAAQ,CAAnC;AACA,QAAMnW,SAAS,GAAGhC,OAAO,CAACW,MAAR,GAAiB,CAAnC;AACA,QAAMI,SAAS,GAAG,CAAC,CAAnB;AACA,QAAMC,SAAS,GAAG0W,eAAe,GAAGzX,IAAI,CAACU,MAAvB,GAAgCgX,gBAAhC,GAAmD,CAArE;AACA,QAAMU,mCAAmC,GAAGC,2BAA2B,CAACvY,gBAAD,CAAvE;AACA,QAAMwY,kCAAkC,GAAGC,0BAA0B,CAACzY,gBAAD,CAArE;AAKA,QAAM0Y,eAAe,GAAG9Q,aAAa,CAAC+Q,SAAD,CAArC;AACA,QAAMC,mBAAmB,GAAGhR,aAAa,CAACiR,aAAD,CAAzC;AACA,QAAMC,8BAA8B,GAAGlR,aAAa,CAACmR,SAAD,CAApD;AACA,QAAMC,wBAAwB,GAAGpR,aAAa,CAC5C,CAAC5O,GAAD,EAASqD,MAAT,EAA0C4c,YAA1C,KAA2E;AACzE,UAAM7Y,MAAM,GAAGF,IAAI,CAAC6E,OAAL,CAAa/L,GAAb,CAAf;AACAkU,IAAAA,UAAU,CAAC;AAAE9M,MAAAA,MAAF;AAAUnB,MAAAA,GAAG,EAAE5C,MAAM,CAAC4C;AAAtB,KAAD,EAA8Bga,YAA9B,CAAV;AACD,GAJ2C,CAA9C;AAMA,QAAMC,iBAAiB,GAAGtR,aAAa,CAAExH,MAAD,IAAoB;AAC1D8M,IAAAA,UAAU,CAAC;AAAE9M,MAAAA,MAAF;AAAUnB,MAAAA,GAAG,EAAE,CAAC;AAAhB,KAAD,CAAV;AACD,GAFsC,CAAvC;AAGA,QAAMka,sBAAsB,GAAGvR,aAAa,CAAE3I,GAAD,IAAiB;AAC5DiO,IAAAA,UAAU,CAAC;AAAE9M,MAAAA,MAAM,EAAE,CAAC,CAAX;AAAcnB,MAAAA;AAAd,KAAD,CAAV;AACD,GAF2C,CAA5C;AAGA,QAAMma,uBAAuB,GAAGxR,aAAa,CAC3C,CAAC2K,UAAD,EAAiBlW,MAAjB,KAAqD;AACnD,UAAM+D,MAAM,GAAGM,WAAW,CAAEqE,OAAb,CAAqBwN,UAArB,IAAmCoF,eAAnC,GAAqDzX,IAAI,CAACU,MAA1D,GAAmE,CAAlF;AACAsM,IAAAA,UAAU,CAAC;AAAE9M,MAAAA,MAAF;AAAUnB,MAAAA,GAAG,EAAE5C,MAAM,CAAC4C;AAAtB,KAAD,CAAV;AACD,GAJ0C,CAA7C;AAMA,QAAMoa,iBAAiB,GAAGzR,aAAa,CAAC9K,WAAD,CAAvC;AAKAnC,EAAAA,eAAe,CAAC,MAAM;AACpB,QACE,CAAC2d,mCAAD,IACAgB,cAAc,CAACtZ,gBAAD,EAAmBwX,oBAAoB,CAACtc,OAAxC,CAFhB,EAGE;AACAsc,MAAAA,oBAAoB,CAACtc,OAArB,GAA+B8E,gBAA/B;AACA;AACD;;AAEDwX,IAAAA,oBAAoB,CAACtc,OAArB,GAA+B8E,gBAA/B;AACAgT,IAAAA,YAAY,CAAChT,gBAAD,CAAZ;;AAEA,QAAIA,gBAAgB,CAACf,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;AAC/ByY,MAAAA,MAAM,CAACxc,OAAP,CAAgBC,KAAhB,CAAsB;AAAEC,QAAAA,aAAa,EAAE;AAAjB,OAAtB;AACD;AACF,GAfc,CAAf;AAiBAT,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAI2c,gBAAgB,KAAK,IAAzB,EAA+B;AAC/B,UAAMiC,aAAa,GAAGxS,OAAO,CAAC7L,OAAR,CAAiBse,aAAjB,CACnB,mBAAkBlC,gBAAgB,CAACrY,GAAjB,GAAuB,CAAE,IADxB,CAAtB;AAGA,UAAMhB,KAAK,GAAGsb,aAAa,CAAChS,WAAd,GAA4B,CAA1C;AACAwP,IAAAA,eAAe,CAAErT,YAAD,IAAkB;AAChC,YAAM+V,eAAe,GAAG,IAAInU,GAAJ,CAAQ5B,YAAR,CAAxB;AACA+V,MAAAA,eAAe,CAAC5T,GAAhB,CAAoByR,gBAAgB,CAAChb,GAArC,EAA0C2B,KAA1C;AACA,aAAOwb,eAAP;AACD,KAJc,CAAf;AAKAlC,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAxK,IAAAA,cAAc,QAAd,YAAAA,cAAc,CAAGuK,gBAAgB,CAACrY,GAApB,EAAyBhB,KAAzB,CAAd;AACD,GAbc,EAaZ,CAACqZ,gBAAD,EAAmBvQ,OAAnB,EAA4BgG,cAA5B,CAbY,CAAf;AAeA2M,EAAAA,mBAAmB,CAAC1f,GAAD,EAAM,OAAO;AAC9B2f,IAAAA,OAAO,EAAE5S,OAAO,CAAC7L,OADa;;AAE9B0e,IAAAA,cAAc,CAAC3a,GAAD,EAAc;AAC1B+T,MAAAA,YAAY,CAAC;AAAE/T,QAAAA;AAAF,OAAD,CAAZ;AACD,KAJ6B;;AAK9B4a,IAAAA,WAAW,CAACzZ,MAAD,EAAiB;AAC1B,YAAM;AAAElF,QAAAA;AAAF,UAAc6L,OAApB;AACA,UAAI,CAAC7L,OAAL,EAAc;AACdA,MAAAA,OAAO,CAAC4e,QAAR,CAAiB;AACfzO,QAAAA,GAAG,EAAEP,SAAS,CAAC1K,MAAD,CADC;AAEf2Z,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAID,KAZ6B;;AAa9B7M,IAAAA;AAb8B,GAAP,CAAN,CAAnB;AAmBA,QAAM8M,kBAAkB,GAAGlS,WAAW,CACpC,CAACzL,MAAD,EAAkC4B,KAAlC,KAA6D;AAC3D,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBsZ,MAAAA,mBAAmB,CAAClb,MAAD,CAAnB;AACA;AACD;;AACD0a,IAAAA,eAAe,CAAErT,YAAD,IAAkB;AAChC,YAAM+V,eAAe,GAAG,IAAInU,GAAJ,CAAQ5B,YAAR,CAAxB;AACA+V,MAAAA,eAAe,CAAC5T,GAAhB,CAAoBxJ,MAAM,CAACC,GAA3B,EAAgC2B,KAAhC;AACA,aAAOwb,eAAP;AACD,KAJc,CAAf;AAMA1M,IAAAA,cAAc,QAAd,YAAAA,cAAc,CAAG1Q,MAAM,CAAC4C,GAAV,EAAehB,KAAf,CAAd;AACD,GAbmC,EAcpC,CAAC8O,cAAD,CAdoC,CAAtC;AAiBA,QAAMqE,oBAAoB,GAAGtJ,WAAW,CAAE1H,MAAD,IAAqB;AAC5DiX,IAAAA,aAAa,CAACjX,MAAD,CAAb;AACA8T,IAAAA,uBAAuB,CAAChZ,OAAxB,GAAkCkF,MAAlC;AACD,GAHuC,EAGrC,EAHqC,CAAxC;;AAQA,WAASuY,SAAT,CAAmB;AAAE3f,IAAAA,GAAF;AAAOoB,IAAAA,OAAP;AAAgByD,IAAAA;AAAhB,GAAnB,EAAsE;AACpE,QAAI,CAACkY,oBAAL,EAA2B;AAE3BlT,IAAAA,sBAAsB,CAAO4S,YAAP,CAAtB;AACA,UAAMwE,eAAe,GAAG,IAAI9a,GAAJ,CAAQ2W,YAAR,CAAxB;;AACA,QAAI3V,UAAU,CAACnH,GAAD,CAAd,EAAqB;AACnB,WAAK,MAAMkhB,QAAX,IAAuBlhB,GAAG,CAAC4Q,SAA3B,EAAsC;AACpC,cAAMuQ,MAAM,GAAG1E,YAAY,CAACyE,QAAD,CAA3B;;AACA,YAAI9f,OAAJ,EAAa;AACX6f,UAAAA,eAAe,CAACtP,GAAhB,CAAoBwP,MAApB;AACD,SAFD,MAEO;AACLF,UAAAA,eAAe,CAACG,MAAhB,CAAuBD,MAAvB;AACD;AACF;;AACDpE,MAAAA,oBAAoB,CAACkE,eAAD,CAApB;AACA;AACD;;AAED,UAAME,MAAM,GAAG1E,YAAY,CAACzc,GAAD,CAA3B;;AACA,QAAIoB,OAAJ,EAAa;AACX6f,MAAAA,eAAe,CAACtP,GAAhB,CAAoBwP,MAApB;AACA,YAAME,cAAc,GAAG5C,kBAAkB,CAACvc,OAA1C;AACA,YAAMkF,MAAM,GAAGF,IAAI,CAAC6E,OAAL,CAAa/L,GAAb,CAAf;AACAye,MAAAA,kBAAkB,CAACvc,OAAnB,GAA6BkF,MAA7B;;AACA,UAAIvC,YAAY,IAAIwc,cAAc,KAAK,CAAC,CAApC,IAAyCA,cAAc,KAAKja,MAAhE,EAAwE;AACtE,cAAMka,IAAI,GAAG5X,IAAI,CAACtC,MAAM,GAAGia,cAAV,CAAjB;;AACA,aAAK,IAAIlU,CAAC,GAAGkU,cAAc,GAAGC,IAA9B,EAAoCnU,CAAC,KAAK/F,MAA1C,EAAkD+F,CAAC,IAAImU,IAAvD,EAA6D;AAC3D,gBAAMthB,GAAG,GAAGkH,IAAI,CAACiG,CAAD,CAAhB;AACA,cAAIhG,UAAU,CAACnH,GAAD,CAAd,EAAqB;AACrBihB,UAAAA,eAAe,CAACtP,GAAhB,CAAoB8K,YAAY,CAACzc,GAAD,CAAhC;AACD;AACF;AACF,KAbD,MAaO;AACLihB,MAAAA,eAAe,CAACG,MAAhB,CAAuBD,MAAvB;AACA1C,MAAAA,kBAAkB,CAACvc,OAAnB,GAA6B,CAAC,CAA9B;AACD;;AAED6a,IAAAA,oBAAoB,CAACkE,eAAD,CAApB;AACD;;AAED,WAASpB,aAAT,CAAuBze,OAAvB,EAAyC;AACvC,QAAI,CAAC2b,oBAAL,EAA2B;AAE3BlT,IAAAA,sBAAsB,CAAO4S,YAAP,CAAtB;AACA,UAAMwE,eAAe,GAAG,IAAI9a,GAAJ,CAAQ2W,YAAR,CAAxB;;AAEA,SAAK,MAAM9c,GAAX,IAAkB+P,OAAlB,EAA2B;AACzB,YAAMoR,MAAM,GAAG1E,YAAY,CAACzc,GAAD,CAA3B;;AACA,UAAIoB,OAAJ,EAAa;AACX6f,QAAAA,eAAe,CAACtP,GAAhB,CAAoBwP,MAApB;AACD,OAFD,MAEO;AACLF,QAAAA,eAAe,CAACG,MAAhB,CAAuBD,MAAvB;AACD;AACF;;AAEDpE,IAAAA,oBAAoB,CAACkE,eAAD,CAApB;AACD;;AAED,WAASnd,WAAT,CAAqByd,eAArB,EAA+C;AAC7C,QAAI,CAACvE,wBAAL,EAA+B;AAC/B,UAAMwE,mBAAmB,GAAG,IAAIrb,GAAJ,CAAQgK,gBAAR,CAA5B;;AACA,QAAIqR,mBAAmB,CAAC/a,GAApB,CAAwB8a,eAAxB,CAAJ,EAA8C;AAC5CC,MAAAA,mBAAmB,CAACJ,MAApB,CAA2BG,eAA3B;AACD,KAFD,MAEO;AACLC,MAAAA,mBAAmB,CAAC7P,GAApB,CAAwB4P,eAAxB;AACD;;AACDvE,IAAAA,wBAAwB,CAACwE,mBAAD,CAAxB;AACD;;AAED,WAASzd,aAAT,CAAuByC,KAAvB,EAAmE;AACjE,QAAI,EAAEA,KAAK,CAACrF,MAAN,YAAwBsgB,OAA1B,CAAJ,EAAwC;AACxC,UAAMC,WAAW,GAAGlb,KAAK,CAACrF,MAAN,CAAawgB,OAAb,CAAqB,WAArB,MAAsC,IAA1D;AACA,UAAMC,UAAU,GAAGxC,SAAS,IAAI5Y,KAAK,CAACrF,MAAN,KAAiBud,MAAM,CAACxc,OAAxD;AACA,QAAI,CAACwf,WAAD,IAAgB,CAACE,UAArB,EAAiC;AAEjC,UAAM;AAAEte,MAAAA,GAAF;AAAOue,MAAAA;AAAP,QAAmBrb,KAAzB;AACA,UAAM;AAAEY,MAAAA;AAAF,QAAaJ,gBAAnB;;AAEA,QACEwY,kCAAkC,KACjCrC,OAAO,IAAI,IAAX,IAAmBD,MAAM,IAAI,IADI,CAAlC,IAEA9W,iBAAiB,CAACI,KAAD,CAFjB,IAGA,CAACW,UAAU,CAACD,IAAI,CAACE,MAAD,CAAL,CAHX,IAIAJ,gBAAgB,CAACuV,IAAjB,KAA0B,QAL5B,EAME;AAGA,YAAMuF,IAAI,GAAG,EAAb;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,UAAIF,OAAO,KAAKC,IAAhB,EAAsB;AACpBE,QAAAA,UAAU;AACV;AACD;;AACD,UAAIH,OAAO,KAAKE,IAAhB,EAAsB;AACpBE,QAAAA,WAAW;AACX;AACD;AACF;;AAED,QAAIC,4BAA4B,CAAC9a,MAAD,CAAhC,EAA0C;AACxC,YAAMpH,GAAG,GAAGkH,IAAI,CAACE,MAAD,CAAhB;;AAEA,UACED,UAAU,CAACnH,GAAD,CAAV,IACAgH,gBAAgB,CAACf,GAAjB,KAAyB,CAAC,CAD1B,KAGE3C,GAAG,KAAKyb,OAAR,IAAmB/e,GAAG,CAAC6D,UAAxB,IAEEP,GAAG,KAAK0b,QAAR,IAAoB,CAAChf,GAAG,CAAC6D,UAL5B,CADF,EAOE;AACA2C,QAAAA,KAAK,CAACkN,cAAN;AACA5P,QAAAA,WAAW,CAAC9D,GAAG,CAACwR,EAAL,CAAX;AACA;AACD;AACF;;AAED,YAAQhL,KAAK,CAAClD,GAAd;AACE,WAAK,QAAL;AACE4a,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA;;AACF,WAAK,SAAL;AACA,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,YAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,KAAL;AACA,WAAK,QAAL;AACA,WAAK,UAAL;AACEiE,QAAAA,QAAQ,CAAC3b,KAAD,CAAR;AACA;;AACF;AACE4b,QAAAA,eAAe,CAAC5b,KAAD,CAAf;AACA;AAjBJ;AAmBD;;AAED,WAAS6b,YAAT,CAAsB7b,KAAtB,EAA4D;AAC1D,UAAM;AAAEyJ,MAAAA,SAAF;AAAarF,MAAAA;AAAb,QAA4BpE,KAAK,CAACyO,aAAxC;AACA4I,IAAAA,YAAY,CAAC5N,SAAD,CAAZ;AAEA6N,IAAAA,aAAa,CAACnU,GAAG,CAACiB,UAAD,CAAJ,CAAb;AACAqS,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGzW,KAAH,CAAR;AACD;;AAED,WAAS8b,YAAT,CAAsBlb,MAAtB,EAAsC;AACpC,WAAOgY,SAAS,GAAGrP,OAAO,CAAChE,OAAR,CAAgB7E,IAAI,CAACE,MAAD,CAApB,CAAH,GAAwCA,MAAxD;AACD;;AAED,WAAS2Y,SAAT,CAAmB3Y,MAAnB,EAAmCpH,GAAnC,EAA2C;AACzC,QAAI,OAAOmb,YAAP,KAAwB,UAA5B,EAAwC;AACxC,UAAMoH,SAAS,GAAGD,YAAY,CAAClb,MAAD,CAA9B;AACA,QAAIpH,GAAG,KAAK+P,OAAO,CAACwS,SAAD,CAAnB,EAAgC;AAChC,UAAMvG,WAAW,GAAG,CAAC,GAAGjM,OAAJ,CAApB;AACAiM,IAAAA,WAAW,CAACuG,SAAD,CAAX,GAAyBviB,GAAzB;AACAmb,IAAAA,YAAY,CAACa,WAAD,EAAc;AACxBC,MAAAA,OAAO,EAAE,CAACsG,SAAD,CADe;AAExBlf,MAAAA,MAAM,EAAE4D,OAAO,CAACD,gBAAgB,CAACf,GAAlB;AAFS,KAAd,CAAZ;AAID;;AAED,WAASuc,mBAAT,GAA+B;AAC7B,QAAIxb,gBAAgB,CAACuV,IAAjB,KAA0B,MAA9B,EAAsC;AACtCwD,IAAAA,SAAS,CAAC/Y,gBAAgB,CAACI,MAAlB,EAA0BJ,gBAAgB,CAAChH,GAA3C,CAAT;AACD;;AAED,WAASgiB,UAAT,GAAsB;AACpB,UAAM;AAAE/b,MAAAA,GAAF;AAAOmB,MAAAA;AAAP,QAAkBJ,gBAAxB;AACA,UAAM+U,SAAS,GAAGhM,OAAO,CAACuS,YAAY,CAAClb,MAAD,CAAb,CAAzB;AACA,UAAMqb,eAAe,GAAGxb,OAAO,CAAChB,GAAD,CAAP,CAAa3C,GAArC;AACA4a,IAAAA,aAAa,CAAC;AAAEle,MAAAA,GAAG,EAAE+b,SAAP;AAAkBvH,MAAAA,SAAS,EAAEiO;AAA7B,KAAD,CAAb;AACAvF,IAAAA,MAAM,QAAN,YAAAA,MAAM,CAAG;AAAEnB,MAAAA,SAAF;AAAa0G,MAAAA;AAAb,KAAH,CAAN;AACD;;AAED,WAASR,WAAT,GAAuB;AACrB,QAAI,CAAC9E,OAAD,IAAY,CAAChC,YAAb,IAA6B8C,UAAU,KAAK,IAA5C,IAAoD,CAAC5W,cAAc,CAACL,gBAAD,CAAvE,EAA2F;AACzF;AACD;;AAED,UAAM;AAAEf,MAAAA,GAAF;AAAOmB,MAAAA;AAAP,QAAkBJ,gBAAxB;AACA,UAAMmV,SAAS,GAAGpM,OAAO,CAACuS,YAAY,CAAClb,MAAD,CAAb,CAAzB;AAEA,UAAMsb,gBAAgB,GAAGvF,OAAO,CAAC;AAC/BpB,MAAAA,SAAS,EAAEkC,UAAU,CAACje,GADS;AAE/ByiB,MAAAA,eAAe,EAAExE,UAAU,CAACzJ,SAFG;AAG/B2H,MAAAA,SAH+B;AAI/BwG,MAAAA,eAAe,EAAE1b,OAAO,CAAChB,GAAD,CAAP,CAAa3C;AAJC,KAAD,CAAhC;AAOAyc,IAAAA,SAAS,CAAC3Y,MAAD,EAASsb,gBAAT,CAAT;AACD;;AAED,WAASN,eAAT,CAAyB5b,KAAzB,EAAqE;AAAA;;AACnE,QAAI,CAACgZ,kCAAL,EAAyC;AACzC,UAAMxf,GAAG,GAAGkH,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAhB;AACA,QAAID,UAAU,CAACnH,GAAD,CAAd,EAAqB;AACrB,UAAM;AAAEsD,MAAAA,GAAF;AAAOhC,MAAAA;AAAP,QAAoBkF,KAA1B;;AAGA,QAAIqY,YAAY,IAAIvd,QAAhB,IAA4BgC,GAAG,KAAK,GAAxC,EAA6C;AAC3CuG,MAAAA,sBAAsB,CAAO4S,YAAP,CAAtB;AACA,YAAM0E,MAAM,GAAG1E,YAAY,CAACzc,GAAD,CAA3B;AACA2f,MAAAA,SAAS,CAAC;AAAE3f,QAAAA,GAAF;AAAOoB,QAAAA,OAAO,EAAE,CAAC0b,YAAY,CAACrW,GAAb,CAAiB0a,MAAjB,CAAjB;AAA2Ctc,QAAAA,YAAY,EAAE;AAAzD,OAAD,CAAT;AAEA2B,MAAAA,KAAK,CAACkN,cAAN;AACA;AACD;;AAED,UAAMrQ,MAAM,GAAG4D,OAAO,CAACD,gBAAgB,CAACf,GAAlB,CAAtB;AACA,6BAAA5C,MAAM,CAACoU,aAAP,2CAAsBmL,aAAtB,0CAAsBA,aAAtB,CAAsCpc,KAAtC;AACA,QAAIA,KAAK,CAACqc,kBAAN,EAAJ,EAAgC;;AAEhC,QAAIxb,cAAc,CAACL,gBAAD,CAAd,IAAoCT,kBAAkB,CAACC,KAAD,CAA1D,EAAmE;AACjEwX,MAAAA,mBAAmB,CAAC,CAAC;AAAE/X,QAAAA,GAAF;AAAOmB,QAAAA;AAAP,OAAD,MAAsB;AACxCnB,QAAAA,GADwC;AAExCmB,QAAAA,MAFwC;AAGxCmV,QAAAA,IAAI,EAAE,MAHkC;AAIxCvc,QAAAA,GAJwC;AAKxC8iB,QAAAA,WAAW,EAAE9iB;AAL2B,OAAtB,CAAD,CAAnB;AAOD;AACF;;AAKD,WAAS+iB,6BAAT,CAAuC9c,GAAvC,EAAoD;AAClD,WAAOA,GAAG,IAAIoZ,SAAP,IAAoBpZ,GAAG,IAAIgD,SAAlC;AACD;;AAED,WAASiZ,4BAAT,CAAsC9a,MAAtC,EAAsD;AACpD,WAAOA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGF,IAAI,CAACU,MAApC;AACD;;AAED,WAAS2X,2BAAT,CAAqC;AAAEtZ,IAAAA,GAAF;AAAOmB,IAAAA;AAAP,GAArC,EAAyE;AACvE,WAAOA,MAAM,IAAIY,SAAV,IAAuBZ,MAAM,IAAIa,SAAjC,IAA8C8a,6BAA6B,CAAC9c,GAAD,CAAlF;AACD;;AAED,WAASwZ,0BAAT,CAAoC;AAAExZ,IAAAA,GAAF;AAAOmB,IAAAA;AAAP,GAApC,EAAwE;AACtE,WAAO8a,4BAA4B,CAAC9a,MAAD,CAA5B,IAAwC2b,6BAA6B,CAAC9c,GAAD,CAA5E;AACD;;AAED,WAASoB,cAAT,CAAwB+K,QAAxB,EAAqD;AACnD,WACEqN,0BAA0B,CAACrN,QAAD,CAA1B,IACArL,sBAAsB,CAAC;AAAEE,MAAAA,OAAF;AAAWC,MAAAA,IAAX;AAAiBF,MAAAA,gBAAgB,EAAEoL,QAAnC;AAA6CjL,MAAAA;AAA7C,KAAD,CAFxB;AAID;;AAED,WAAS+M,UAAT,CAAoB9B,QAApB,EAAwC6N,YAAxC,EAA6E;AAC3E,QAAI,CAACV,2BAA2B,CAACnN,QAAD,CAAhC,EAA4C;AAC5CoQ,IAAAA,mBAAmB;;AAEnB,QAAIvC,YAAY,IAAI5Y,cAAc,CAAC+K,QAAD,CAAlC,EAA8C;AAC5C,YAAMpS,GAAG,GAAGkH,IAAI,CAACkL,QAAQ,CAAChL,MAAV,CAAhB;AACA4W,MAAAA,mBAAmB,CAAC,EAAE,GAAG5L,QAAL;AAAemK,QAAAA,IAAI,EAAE,MAArB;AAA6Bvc,QAAAA,GAA7B;AAAkC8iB,QAAAA,WAAW,EAAE9iB;AAA/C,OAAD,CAAnB;AACD,KAHD,MAGO,IAAIsgB,cAAc,CAACtZ,gBAAD,EAAmBoL,QAAnB,CAAlB,EAAgD;AAGrD4H,MAAAA,YAAY,CAAC5H,QAAD,CAAZ;AACD,KAJM,MAIA;AACL4L,MAAAA,mBAAmB,CAAC,EAAE,GAAG5L,QAAL;AAAemK,QAAAA,IAAI,EAAE;AAArB,OAAD,CAAnB;AACD;AACF;;AAED,WAASvC,YAAT,CAAsB;AAAE/T,IAAAA,GAAF;AAAOmB,IAAAA;AAAP,GAAtB,EAAgE;AAC9D,UAAM;AAAElF,MAAAA;AAAF,QAAc6L,OAApB;AACA,QAAI,CAAC7L,OAAL,EAAc;;AAEd,QAAI,OAAO+D,GAAP,KAAe,QAAf,IAA2BA,GAAG,GAAGL,qBAArC,EAA4D;AAAA;;AAC1D,iBAAAwB,MAAM,SAAN,aAAAA,MAAM,GAAKJ,gBAAgB,CAACI,MAA5B;AACA,UAAI,CAACmY,2BAA2B,CAAC;AAAEnY,QAAAA,MAAF;AAAUnB,QAAAA;AAAV,OAAD,CAAhC,EAAmD;AACnD,YAAM;AAAEsI,QAAAA;AAAF,UAAkBrM,OAAxB;AACA,YAAMmB,MAAM,GAAG4D,OAAO,CAAChB,GAAD,CAAtB;AACA,YAAM;AAAEsG,QAAAA,IAAF;AAAQtH,QAAAA;AAAR,UAAkBoH,aAAa,CAACU,GAAd,CAAkB1J,MAAlB,CAAxB;AACA,UAAI8R,KAAK,GAAG5I,IAAI,GAAGtH,KAAnB;AAEA,YAAMa,OAAO,GAAG2B,sBAAsB,CAAC;AACrCP,QAAAA,IADqC;AAErCQ,QAAAA,WAFqC;AAGrCN,QAAAA,MAHqC;AAIrCxB,QAAAA,qBAJqC;AAKrCvC,QAAAA,MALqC;AAMrC8D,QAAAA;AANqC,OAAD,CAAtC;;AASA,UAAIrB,OAAO,KAAKtD,SAAhB,EAA2B;AACzB,cAAM;AAAE+J,UAAAA,IAAF;AAAQtH,UAAAA;AAAR,YAAkBoH,aAAa,CAACU,GAAd,CAAkB9F,OAAO,CAAC5D,MAAM,CAAC4C,GAAP,GAAaH,OAAb,GAAuB,CAAxB,CAAzB,CAAxB;AACAqP,QAAAA,KAAK,GAAG5I,IAAI,GAAGtH,KAAf;AACD;;AAED,YAAM+d,oBAAoB,GAAGzW,IAAI,GAAG3B,UAAU,GAAGwB,sBAAjD;AACA,YAAM6W,qBAAqB,GAAG9N,KAAK,GAAG5G,WAAW,GAAG3D,UAApD;AACA,YAAMlB,IAAI,GAAG2K,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAA1B;;AACA,UAAI2O,oBAAJ,EAA0B;AACxB9gB,QAAAA,OAAO,CAAC0I,UAAR,GAAqB,CAAC2B,IAAI,GAAGH,sBAAR,IAAkC1C,IAAvD;AACD,OAFD,MAEO,IAAIuZ,qBAAJ,EAA2B;AAChC/gB,QAAAA,OAAO,CAAC0I,UAAR,GAAqB,CAACuK,KAAK,GAAG5G,WAAT,IAAwB7E,IAA7C;AACD;AACF;;AAED,QAAI,OAAOtC,MAAP,KAAkB,QAAlB,IAA8B8a,4BAA4B,CAAC9a,MAAD,CAA9D,EAAwE;AACtE,YAAM8b,MAAM,GAAGpR,SAAS,CAAC1K,MAAD,CAAxB;AACA,YAAM4I,SAAS,GAAG+B,YAAY,CAAC3K,MAAD,CAA9B;;AACA,UAAI8b,MAAM,GAAGjT,SAAb,EAAwB;AAEtB/N,QAAAA,OAAO,CAAC+N,SAAR,GAAoBiT,MAApB;AACD,OAHD,MAGO,IAAIA,MAAM,GAAGlT,SAAT,GAAqBC,SAAS,GAAGzB,YAArC,EAAmD;AAExDtM,QAAAA,OAAO,CAAC+N,SAAR,GAAoBiT,MAAM,GAAGlT,SAAT,GAAqBxB,YAAzC;AACD;AACF;AACF;;AAED,WAAS2U,eAAT,CAAyB7f,GAAzB,EAAsC+C,OAAtC,EAAwD/E,QAAxD,EAAqF;AACnF,UAAM;AAAE2E,MAAAA,GAAF;AAAOmB,MAAAA;AAAP,QAAkBJ,gBAAxB;AACA,UAAMhH,GAAG,GAAGkH,IAAI,CAACE,MAAD,CAAhB;AACA,UAAMzC,aAAa,GAAG2a,mCAAmC,IAAIrZ,GAAG,KAAK,CAAC,CAAtE;;AAGA,QAAI3C,GAAG,KAAKyb,OAAR,IAAmBpa,aAAnB,IAAoCwC,UAAU,CAACnH,GAAD,CAA9C,IAAuD,CAACA,GAAG,CAAC6D,UAA5D,IAA0E7D,GAAG,CAACqR,KAAJ,KAAc,CAA5F,EAA+F;AAC7F,UAAI+R,YAAY,GAAG,CAAC,CAApB;;AACA,WAAK,IAAIjW,CAAC,GAAGnG,gBAAgB,CAACI,MAAjB,GAA0B,CAAvC,EAA0C+F,CAAC,IAAI,CAA/C,EAAkDA,CAAC,EAAnD,EAAuD;AACrD,cAAMkW,SAAS,GAAGnc,IAAI,CAACiG,CAAD,CAAtB;;AACA,YAAIhG,UAAU,CAACkc,SAAD,CAAV,IAAyBA,SAAS,CAAC7R,EAAV,KAAiBxR,GAAG,CAACoR,QAAlD,EAA4D;AAC1DgS,UAAAA,YAAY,GAAGjW,CAAf;AACA;AACD;AACF;;AACD,UAAIiW,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,eAAO;AAAEnd,UAAAA,GAAF;AAAOmB,UAAAA,MAAM,EAAEgc;AAAf,SAAP;AACD;AACF;;AAED,YAAQ9f,GAAR;AACE,WAAK,SAAL;AACE,eAAO;AAAE2C,UAAAA,GAAF;AAAOmB,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAEnB,UAAAA,GAAF;AAAOmB,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAOiN,KAAK,GAAG;AAAEpO,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBmB,UAAAA;AAAhB,SAAH,GAA8B;AAAEnB,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBmB,UAAAA;AAAhB,SAA1C;;AACF,WAAK,YAAL;AACE,eAAOiN,KAAK,GAAG;AAAEpO,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBmB,UAAAA;AAAhB,SAAH,GAA8B;AAAEnB,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBmB,UAAAA;AAAhB,SAA1C;;AACF,WAAK,KAAL;AACE,eAAO;AAAEnB,UAAAA,GAAG,EAAEA,GAAG,IAAI3E,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAApB,CAAV;AAAkC8F,UAAAA;AAAlC,SAAP;;AACF,WAAK,MAAL;AAEE,YAAIzC,aAAJ,EAAmB,OAAO;AAAEsB,UAAAA,GAAF;AAAOmB,UAAAA,MAAM,EAAE;AAAf,SAAP;AACnB,eAAO;AAAEnB,UAAAA,GAAG,EAAE,CAAP;AAAUmB,UAAAA,MAAM,EAAEf,OAAO,GAAG2B,SAAH,GAAeZ;AAAxC,SAAP;;AACF,WAAK,KAAL;AAEE,YAAIzC,aAAJ,EAAmB,OAAO;AAAEsB,UAAAA,GAAF;AAAOmB,UAAAA,MAAM,EAAEF,IAAI,CAACU,MAAL,GAAc;AAA7B,SAAP;AACnB,eAAO;AAAE3B,UAAAA,GAAG,EAAEgD,SAAP;AAAkB7B,UAAAA,MAAM,EAAEf,OAAO,GAAG4B,SAAH,GAAeb;AAAhD,SAAP;;AACF,WAAK,QAAL;AAAe;AACb,cAAIJ,gBAAgB,CAACI,MAAjB,KAA4BY,SAAhC,EAA2C,OAAOhB,gBAAP;AAC3C,gBAAMsc,QAAQ,GAAGxR,SAAS,CAAC1K,MAAD,CAAT,GAAoB2K,YAAY,CAAC3K,MAAD,CAAhC,GAA2CoH,YAA5D;AACA,iBAAO;AAAEvI,YAAAA,GAAF;AAAOmB,YAAAA,MAAM,EAAEkc,QAAQ,GAAG,CAAX,GAAetR,UAAU,CAACsR,QAAD,CAAzB,GAAsC;AAArD,WAAP;AACD;;AACD,WAAK,UAAL;AAAiB;AACf,cAAItc,gBAAgB,CAACI,MAAjB,IAA2BF,IAAI,CAACU,MAApC,EAA4C,OAAOZ,gBAAP;AAC5C,gBAAMsc,QAAQ,GAAGxR,SAAS,CAAC1K,MAAD,CAAT,GAAoBoH,YAArC;AACA,iBAAO;AAAEvI,YAAAA,GAAF;AAAOmB,YAAAA,MAAM,EAAEkc,QAAQ,GAAG1R,cAAX,GAA4BI,UAAU,CAACsR,QAAD,CAAtC,GAAmDpc,IAAI,CAACU,MAAL,GAAc;AAAhF,WAAP;AACD;;AACD;AACE,eAAOZ,gBAAP;AA9BJ;AAgCD;;AAED,WAASmb,QAAT,CAAkB3b,KAAlB,EAA8D;AAC5D,UAAM;AAAElD,MAAAA,GAAF;AAAOhC,MAAAA;AAAP,QAAoBkF,KAA1B;AACA,QAAI+V,IAAI,GAAGzU,kBAAX;;AACA,QAAIxE,GAAG,KAAK,KAAZ,EAAmB;AACjB,UACE0F,WAAW,CAAC;AACV1H,QAAAA,QADU;AAEVwG,QAAAA,kBAFU;AAGVmB,QAAAA,SAHU;AAIVjB,QAAAA,SAJU;AAKVC,QAAAA,SALU;AAMVjB,QAAAA;AANU,OAAD,CADb,EASE;AACAwb,QAAAA,mBAAmB;AAEnB;AACD;;AAEDjG,MAAAA,IAAI,GAAGzU,kBAAkB,KAAK,MAAvB,GAAgC,YAAhC,GAA+CA,kBAAtD;AACD;;AAGDtB,IAAAA,KAAK,CAACkN,cAAN;AAEA,UAAMrN,OAAO,GAAGD,iBAAiB,CAACI,KAAD,CAAjC;AACA,UAAM4B,YAAY,GAAG+a,eAAe,CAAC7f,GAAD,EAAM+C,OAAN,EAAe/E,QAAf,CAApC;AACA,QAAIgf,cAAc,CAACtZ,gBAAD,EAAmBoB,YAAnB,CAAlB,EAAoD;AAEpD,UAAMmb,wBAAwB,GAAG1b,2BAA2B,CAAC;AAC3DZ,MAAAA,OAD2D;AAE3Dc,MAAAA,cAF2D;AAG3Db,MAAAA,IAH2D;AAI3DQ,MAAAA,WAJ2D;AAK3DM,MAAAA,SAL2D;AAM3DC,MAAAA,SAN2D;AAO3DrC,MAAAA,qBAP2D;AAQ3DkC,MAAAA,kBAAkB,EAAEyU,IARuC;AAS3DrU,MAAAA,eAAe,EAAElB,gBAT0C;AAU3DoB,MAAAA,YAV2D;AAW3DC,MAAAA,kBAAkB,EAAEkX,2BAXuC;AAY3DpY,MAAAA;AAZ2D,KAAD,CAA5D;AAeA+M,IAAAA,UAAU,CAACqP,wBAAD,CAAV;AACD;;AAED,WAASC,qBAAT,CAA+BC,aAA/B,EAA0E;AACxE,QAAIrF,iBAAiB,KAAK5b,SAA1B,EAAqC;AACrC,UAAM;AAAE4E,MAAAA;AAAF,QAAaJ,gBAAnB;AAEA,UAAMiQ,aAAa,GACjB7P,MAAM,GAAGgX,iBAAT,GACIhX,MAAM,GAAGqc,aAAT,IAA0BA,aAAa,IAAIrF,iBAD/C,GAEIhX,MAAM,GAAGqc,aAAT,IAA0BA,aAAa,IAAIrF,iBAHjD;AAKA,WAAOnH,aAAa,GAAGjQ,gBAAgB,CAACf,GAApB,GAA0BzD,SAA9C;AACD;;AAED,WAASkhB,gBAAT,GAA4B;AAC1B,QAAIpF,gBAAgB,KAAK,IAAzB,EAA+B,OAAOpS,aAAP;AAC/B,UAAM;AAAEgB,MAAAA;AAAF,QAA0BhB,aAAhC;AACA,UAAMyX,QAAQ,GAAGzW,mBAAmB,CAAC0W,KAApB,CAA0B,GAA1B,CAAjB;AACAD,IAAAA,QAAQ,CAACrF,gBAAgB,CAACrY,GAAlB,CAAR,GAAiC,aAAjC;AACA,WAAO,EACL,GAAGiG,aADE;AAELgB,MAAAA,mBAAmB,EAAEyW,QAAQ,CAACE,IAAT,CAAc,GAAd;AAFhB,KAAP;AAID;;AAED,WAASC,aAAT,CAAuB1c,MAAvB,EAAuC;AACrC,QACEJ,gBAAgB,CAACI,MAAjB,KAA4BA,MAA5B,IACAJ,gBAAgB,CAACuV,IAAjB,KAA0B,MAD1B,IAEA6C,SAFA,IAGAhE,MAAM,IAAI,IAJZ,EAKE;AACA;AACD;;AAED,wBACE1Z,IAAC,UAAD;AACE,MAAA,IAAI,EAAEqO,OADR;AAEE,MAAA,OAAO,EAAE9I,OAFX;AAGE,MAAA,gBAAgB,EAAED,gBAHpB;AAIE,MAAA,cAAc,EAAEK,cAJlB;AAKE,MAAA,uBAAuB,EAAE6T,uBAL3B;AAME,MAAA,YAAY,EAAEC,YANhB;AAOE,MAAA,MAAM,EAAEC,MAPV;AAQE,MAAA,WAAW,EAAEC,WARf;AASE,MAAA,oBAAoB,EAAEjD;AATxB,MADF;AAaD;;AAED,WAAS2L,aAAT,CAAuB3c,MAAvB,EAAuC;AACrC,QAAIJ,gBAAgB,CAACI,MAAjB,KAA4BA,MAA5B,IAAsCJ,gBAAgB,CAACuV,IAAjB,KAA0B,QAApE,EAA8E;AAE9E,UAAM;AAAEtW,MAAAA,GAAF;AAAOjG,MAAAA;AAAP,QAAegH,gBAArB;AACA,UAAM3D,MAAM,GAAG4D,OAAO,CAAChB,GAAD,CAAtB;AACA,UAAMH,OAAO,GAAGH,UAAU,CAACtC,MAAD,EAASuC,qBAAT,EAAgC;AAAE+B,MAAAA,IAAI,EAAE,KAAR;AAAe3H,MAAAA;AAAf,KAAhC,CAA1B;;AAEA,UAAM+Z,WAAW,GAAG,MAAM;AACxBiE,MAAAA,mBAAmB,CAAC,CAAC;AAAE/X,QAAAA,GAAF;AAAOmB,QAAAA;AAAP,OAAD,MAAsB;AAAEnB,QAAAA,GAAF;AAAOmB,QAAAA,MAAP;AAAemV,QAAAA,IAAI,EAAE;AAArB,OAAtB,CAAD,CAAnB;AACD,KAFD;;AAIA,UAAMlF,WAAW,GAAG,CAACrX,GAAD,EAAS6a,aAAT,KAAqC;AACvD,UAAIA,aAAJ,EAAmB;AACjBkF,QAAAA,SAAS,CAAC/Y,gBAAgB,CAACI,MAAlB,EAA0BpH,GAA1B,CAAT;AACA+Z,QAAAA,WAAW;AACZ,OAHD,MAGO;AACLiE,QAAAA,mBAAmB,CAAE5L,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAepS,UAAAA;AAAf,SAAf,CAAD,CAAnB;AACD;AACF,KAPD;;AASA,QAAIkH,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAJ,KAAkCJ,gBAAgB,CAAC8b,WAAvD,EAAoE;AAElE/I,MAAAA,WAAW;AACZ;;AAED,wBACErY,IAAC,QAAD;AAEE,MAAA,MAAM,EAAE2B,MAFV;AAGE,MAAA,OAAO,EAAEyC,OAHX;AAIE,MAAA,GAAG,EAAE9F,GAJP;AAKE,MAAA,WAAW,EAAEqX,WALf;AAME,MAAA,WAAW,EAAE0C,WANf;AAOE,MAAA,YAAY,EAAE,MAAM;AAClBC,QAAAA,YAAY,CAAChT,gBAAD,CAAZ;AACD;AATH,OACO3D,MAAM,CAACC,GADd,CADF;AAaD;;AAED,WAAS0gB,eAAT,GAA2B;AACzB,UAAMC,WAAW,GAAG,EAApB;AACA,QAAIxT,aAAa,GAAG,CAApB;AAEA,UAAM;AAAExK,MAAAA,GAAG,EAAEie,WAAP;AAAoB9c,MAAAA,MAAM,EAAE+c;AAA5B,QAA+Cnd,gBAArD;AACA,UAAM6U,WAAW,GACf2D,kCAAkC,IAAI2E,cAAc,GAAG9U,mBAAvD,GACIA,mBAAmB,GAAG,CAD1B,GAEIA,mBAHN;AAIA,UAAMyM,SAAS,GACb0D,kCAAkC,IAAI2E,cAAc,GAAG7U,iBAAvD,GACIA,iBAAiB,GAAG,CADxB,GAEIA,iBAHN;;AAKA,SAAK,IAAI8U,cAAc,GAAGvI,WAA1B,EAAuCuI,cAAc,IAAItI,SAAzD,EAAoEsI,cAAc,EAAlF,EAAsF;AACpF,YAAMC,oBAAoB,GACxBD,cAAc,KAAK/U,mBAAmB,GAAG,CAAzC,IAA8C+U,cAAc,KAAK9U,iBAAiB,GAAG,CADvF;AAEA,YAAMlI,MAAM,GAAGid,oBAAoB,GAAGF,cAAH,GAAoBC,cAAvD;AAEA,UAAIE,UAAU,GAAG7U,eAAjB;AACA,YAAM8U,cAAc,GAAGtd,OAAO,CAACid,WAAD,CAA9B;;AAGA,UAAIK,cAAc,KAAK/hB,SAAvB,EAAkC;AAChC,YAAI6hB,oBAAJ,EAA0B;AAExBC,UAAAA,UAAU,GAAG,CAACC,cAAD,CAAb;AACD,SAHD,MAGO,IAAIJ,cAAc,KAAK/c,MAAnB,IAA6B,CAACqI,eAAe,CAAChE,QAAhB,CAAyB8Y,cAAzB,CAAlC,EAA4E;AAEjFD,UAAAA,UAAU,GACRJ,WAAW,GAAGzU,eAAe,CAACA,eAAe,CAAC7H,MAAhB,GAAyB,CAA1B,CAAf,CAA4C3B,GAA1D,GACI,CAAC,GAAGwJ,eAAJ,EAAqB8U,cAArB,CADJ,GAEI,CACE,GAAG9U,eAAe,CAAC+U,KAAhB,CAAsB,CAAtB,EAAyB5e,qBAAqB,GAAG,CAAjD,CADL,EAEE2e,cAFF,EAGE,GAAG9U,eAAe,CAAC+U,KAAhB,CAAsB5e,qBAAqB,GAAG,CAA9C,CAHL,CAHN;AAQD;AACF;;AAED,YAAM5F,GAAG,GAAGkH,IAAI,CAACE,MAAD,CAAhB;AACA,YAAM0Q,YAAY,GAAG6G,eAAe,GAAGvX,MAAlB,GAA2B,CAAhD;;AACA,UAAID,UAAU,CAACnH,GAAD,CAAd,EAAqB;AACnB,SAAC;AAAEyQ,UAAAA;AAAF,YAAoBzQ,GAArB;AACA,cAAMykB,kBAAkB,GACtB5F,YAAY,IAAI7e,GAAG,CAAC4Q,SAAJ,CAAcuO,KAAd,CAAqBuF,EAAD,IAAQ5H,YAAY,CAACrW,GAAb,CAAiBgW,YAAY,CAAEiI,EAAF,CAA7B,CAA5B,CADlB;AAEAT,QAAAA,WAAW,CAAChY,IAAZ,eACEvK,IAAC,gBAAD;AACE,wBAAY1B,GAAG,CAACqR,KAAJ,GAAY,CAD1B;AAEE,0BAAcrR,GAAG,CAAC0R,OAFpB;AAGE,2BAAe1R,GAAG,CAACuR,QAAJ,GAAe,CAHhC;AAIE,2BAAeoN,eAAe,GAAGlO,aAAlB,GAAkC,CAJnD;AAKE,2BAAeoO,YAAY,GAAG4F,kBAAH,GAAwBjiB,SALrD;AAOE,UAAA,EAAE,EAAExC,GAAG,CAACwR,EAPV;AAQE,UAAA,QAAQ,EAAExR,GAAG,CAAC4D,QARhB;AASE,UAAA,eAAe,EAAE0gB,UATnB;AAUE,UAAA,SAAS,EAAEtkB,GAAG,CAAC4Q,SAVjB;AAWE,UAAA,MAAM,EAAExJ,MAXV;AAYE,UAAA,GAAG,EAAEpH,GAZP;AAaE,UAAA,YAAY,EAAE8X,YAbhB;AAcE,UAAA,MAAM,EAAE/F,YAAY,CAAC3K,MAAD,CAdtB;AAeE,UAAA,KAAK,EAAEpH,GAAG,CAACqR,KAfb;AAgBE,UAAA,UAAU,EAAErR,GAAG,CAAC6D,UAhBlB;AAiBE,UAAA,eAAe,EAAEsgB,cAAc,KAAK/c,MAAnB,GAA4B8c,WAA5B,GAA0C1hB,SAjB7D;AAkBE,UAAA,aAAa,EAAEiiB,kBAlBjB;AAmBE,UAAA,WAAW,EAAEvE,iBAnBf;AAoBE,UAAA,WAAW,EAAEG;AApBf,WAMOrgB,GAAG,CAACwR,EANX,CADF;AAwBA;AACD;;AAEDf,MAAAA,aAAa;AACb,UAAInN,GAAJ;AACA,UAAIqB,aAAa,GAAG,KAApB;;AACA,UAAI,OAAO8X,YAAP,KAAwB,UAA5B,EAAwC;AAAA;;AACtCnZ,QAAAA,GAAG,GAAGmZ,YAAY,CAACzc,GAAD,CAAlB;AACA2E,QAAAA,aAAa,wBAAGmY,YAAH,oBAAGA,YAAY,CAAErW,GAAd,CAAkBnD,GAAlB,CAAH,gCAA6B,KAA1C;AACD,OAHD,MAGO;AACLA,QAAAA,GAAG,GAAG8b,SAAS,GAAG3O,aAAH,GAAmBrJ,MAAlC;AACD;;AAED6c,MAAAA,WAAW,CAAChY,IAAZ,eACEvK,IAAC,WAAD;AACE,yBAAeid,eAAe,IAAIS,SAAS,GAAG3O,aAAH,GAAmBrJ,MAAhC,CAAf,GAAyD,CAD1E;AAEE,yBAAeyX,YAAY,GAAGla,aAAH,GAAmBnC,SAFhD;AAIE,QAAA,MAAM,EAAE4E,MAJV;AAKE,QAAA,GAAG,EAAEpH,GALP;AAME,QAAA,eAAe,EAAEskB,UANnB;AAOE,QAAA,aAAa,EAAE3f,aAPjB;AAQE,QAAA,UAAU,EAAEwS,UARd;AASE,QAAA,gBAAgB,EAAEC,gBATpB;AAUE,QAAA,QAAQ,EAAEe,QAVZ;AAWE,QAAA,YAAY,EAAEL,YAXhB;AAYE,QAAA,MAAM,EAAE/F,YAAY,CAAC3K,MAAD,CAZtB;AAaE,QAAA,aAAa,EACX6W,UAAU,KAAK,IAAf,IAAuBA,UAAU,CAACje,GAAX,KAAmBA,GAA1C,GACIiH,OAAO,CAACsN,SAAR,CAAmBoQ,CAAD,IAAOA,CAAC,CAACrhB,GAAF,KAAU2a,UAAU,CAACzJ,SAA9C,CADJ,GAEIhS,SAhBR;AAkBE,QAAA,eAAe,EAAE2hB,cAAc,KAAK/c,MAAnB,GAA4B8c,WAA5B,GAA0C1hB,SAlB7D;AAmBE,QAAA,kBAAkB,EAAEghB,qBAAqB,CAACpc,MAAD,CAnB3C;AAoBE,QAAA,oBAAoB,EAAE+W,UAAU,GAAG/F,oBAAH,GAA0B5V,SApB5D;AAqBE,QAAA,qBAAqB,EAAEoD,qBArBzB;AAsBE,QAAA,WAAW,EAAEka,8BAtBf;AAuBE,QAAA,UAAU,EAAEE,wBAvBd;AAwBE,QAAA,sBAAsB,EAAE8D,aAAa,CAAC1c,MAAD,CAxBvC;AAyBE,QAAA,kBAAkB,EAAE2c,aAAa,CAAC3c,MAAD;AAzBnC,SAGO9D,GAHP,CADF;AA6BD;;AAED,WAAO2gB,WAAP;AACD;;AAGD,MAAIjd,gBAAgB,CAACf,GAAjB,GAAuBgD,SAAvB,IAAoCjC,gBAAgB,CAACI,MAAjB,GAA0Ba,SAAlE,EAA6E;AAC3E+V,IAAAA,mBAAmB,CAAC1B,eAAD,CAAnB;AACAlE,IAAAA,oBAAoB,CAAC5V,SAAD,CAApB;AACD;;AAED,MAAIoiB,YAAY,GAAI,GAAElI,eAAgB,IAAtC;;AACA,MAAIxV,IAAI,CAACU,MAAL,GAAc,CAAlB,EAAqB;AACnBgd,IAAAA,YAAY,IAAI/S,gBAAhB;AACD;;AACD,MAAI+M,gBAAgB,GAAG,CAAvB,EAA0B;AACxBgG,IAAAA,YAAY,IAAK,WAAUhG,gBAAiB,KAAIhC,gBAAiB,KAAjE;AACD;;AAED,sBACErb;AACE,IAAA,IAAI,EAAE6d,SAAS,GAAG,UAAH,GAAgB,MADjC;AAEE,kBAAYpc,SAFd;AAGE,uBAAiBC,cAHnB;AAIE,wBAAkBsa,eAJpB;AAKE,4BAAsBsB,YAAY,GAAG,IAAH,GAAUrc,SAL9C;AAME,qBAAeyE,OAAO,CAACW,MANzB;AAOE,qBAAe+W,eAAe,GAAGtO,SAAlB,GAA8BuO,gBAP/C;AAQE,IAAA,SAAS,EAAEpd,IAAI,CACb5B,aADa,EAMb+U,SANa,EAGkBwJ,UAHlB,IAGVre,yBAHU,EAIgBwe,gBAAgB,KAAK,IAJrC,IAIVhf,uBAJU,CARjB;AAgBE,IAAA,KAAK,EACH,EACE,GAAGge,KADL;AAEEzL,MAAAA,gBAAgB,EAAE+S,YAFpB;AAGE,iCAA4B,GAAElI,eAAgB,IAHhD;AAIE,gCAA2B,GAAEvQ,gBAAiB,IAJhD;AAKE,kCAA6B,GAAEyQ,gBAAiB,IALlD;AAME,+BAA0B,GACxBrT,GAAG,CAACqI,cAAD,EAAiBpD,YAAjB,CAAH,GACAkO,eADA,GAEAkC,gBAAgB,GAAGhC,gBACpB,IAVH;AAWE,oBAAcvI,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAX7B;AAYE,SAAGqP,gBAAgB;AAZrB,KAjBJ;AAgCE,IAAA,GAAG,EAAEtP,SAhCP;AAiCE,IAAA,GAAG,EAAErG,OAjCP;AAkCE,IAAA,QAAQ,EAAEsU,YAlCZ;AAmCE,IAAA,SAAS,EAAEte,aAnCb;AAoCE,mBAAayZ,MApCf;AAAA,eAuCG4B,SAAS,iBACR1d;AACE,MAAA,GAAG,EAAEgd,MADP;AAEE,MAAA,QAAQ,EAAE1X,gBAAgB,CAACf,GAAjB,KAAyB,CAAC,CAA1B,IAA+Be,gBAAgB,CAACI,MAAjB,KAA4B,CAAC,CAA5D,GAAgE,CAAhE,GAAoE,CAAC,CAFjF;AAGE,MAAA,SAAS,EAAErH,kBAHb;AAIE,MAAA,KAAK,EAAE;AACL+X,QAAAA,YAAY,EAAE9Q,gBAAgB,CAACI,MAAjB,GAA0B;AADnC,OAJT;AAOE,MAAA,SAAS,EAAErD;AAPb,MAxCJ,eAkDExC,KAAC,iCAAD;AAAmC,MAAA,KAAK,EAAE0d,qBAA1C;AAAA,8BACEvd,IAAC4U,WAAD;AACE,QAAA,OAAO,EAAE7G,eADX;AAEE,QAAA,cAAc,EAAEuR,kBAFlB;AAGE,QAAA,eAAe,EAAEzb,eAHnB;AAIE,QAAA,wBAAwB,EAAEqa,mBAJ5B;AAKE,QAAA,WAAW,EAAE5L,WALf;AAME,QAAA,mBAAmB,EAAEC,mBANvB;AAOE,QAAA,qBAAqB,EAAErO,qBAPzB;AAQE,QAAA,eAAe,EAAEkZ,mBAAmB,GAAG9X,gBAAgB,CAACf,GAApB,GAA0BzD,SARhE;AASE,QAAA,UAAU,EAAE2d,sBATd;AAUE,QAAA,eAAe,EAAE,CAACb,mCAVpB;AAWE,QAAA,SAAS,EAAElL;AAXb,QADF,EAcGlN,IAAI,CAACU,MAAL,KAAgB,CAAhB,IAAqBgW,cAArB,GACCA,cADD,gBAGCrc;AAAA,gCACEG,IAAC,0BAAD;AAA4B,UAAA,KAAK,EAAEge,eAAnC;AAAA,oBACGsE,eAAe;AADlB,UADF,EAIGtc,WAJH,oBAIGA,WAAW,CAAE6D,GAAb,CAAiB,CAACvL,GAAD,EAAMoH,MAAN,KAAiB;AACjC,gBAAM0Q,YAAY,GAAG6G,eAAe,GAAGzX,IAAI,CAACU,MAAvB,GAAgCR,MAAhC,GAAyC,CAA9D;AACA,gBAAMyd,oBAAoB,GACxB7d,gBAAgB,CAACI,MAAjB,KAA4BuX,eAAe,GAAGzX,IAAI,CAACU,MAAvB,GAAgCR,MAAhC,GAAyC,CADvE;AAEA,gBAAMiL,GAAG,GACP7D,YAAY,GAAGoD,cAAf,GACIzD,UAAU,GAAGyO,gBAAgB,IAAIlV,WAAW,CAACE,MAAZ,GAAqBR,MAAzB,CADjC,GAEI5E,SAHN;AAIA,gBAAMmX,MAAM,GACVtH,GAAG,KAAK7P,SAAR,GACIoa,gBAAgB,IAAIlV,WAAW,CAACE,MAAZ,GAAqB,CAArB,GAAyBR,MAA7B,CADpB,GAEI5E,SAHN;AAKA,8BACEd,IAACgY,YAAD;AACE,6BAAeiF,eAAe,GAAGtO,SAAlB,GAA8BjJ,MAA9B,GAAuC,CADxD;AAGE,YAAA,MAAM,EAAEA,MAHV;AAIE,YAAA,YAAY,EAAE0Q,YAJhB;AAKE,YAAA,GAAG,EAAE9X,GALP;AAME,YAAA,GAAG,EAAEqS,GANP;AAOE,YAAA,MAAM,EAAEsH,MAPV;AAQE,YAAA,eAAe,EAAElK,eARnB;AASE,YAAA,qBAAqB,EAAE7J,qBATzB;AAUE,YAAA,eAAe,EAAEif,oBAAoB,GAAG7d,gBAAgB,CAACf,GAApB,GAA0BzD,SAVjE;AAWE,YAAA,UAAU,EAAE4d;AAXd,aAEOhZ,MAFP,CADF;AAeD,SA5BA,CAJH;AAAA,QAjBJ;AAAA,MAlDF;AAAA,IADF;AA0GD;;AAED,SAASkZ,cAAT,CAAwBwE,EAAxB,EAAsCC,EAAtC,EAAoD;AAClD,SAAOD,EAAE,CAAC7e,GAAH,KAAW8e,EAAE,CAAC9e,GAAd,IAAqB6e,EAAE,CAAC1d,MAAH,KAAc2d,EAAE,CAAC3d,MAA7C;AACD;;AAED,gCAAevG,UAAU,CAAC2b,QAAD,CAAzB;;;;;AChsCA,MAAMwI,UAAU,uBAAhB;AA2BO,MAAMC,mBAAmB,sBAAsBD,YAA/C;;AAEP,SAASE,kBAAT,CAA4BC,KAA5B,EAA4D;AAC1DA,EAAAA,KAAK,QAALA,YAAAA,KAAK,CAAEhjB,KAAPgjB;AACAA,EAAAA,KAAK,QAALA,YAAAA,KAAK,CAAEC,MAAPD;;;AAGa,SAASE,UAAT,CAAuC;AACpDrlB,EAAAA,GADoD;AAEpDqD,EAAAA,MAFoD;AAGpDgU,EAAAA,WAHoD;AAIpD+C,EAAAA;AAJoD,CAAvC,EAKoB;sBAE/B1Y;AACE,IAAA,WAAWujB,mBADb;AAEE,IAAA,KAAKC,kBAFP;AAGE,IAAA,OAAOllB,GAAG,CAACqD,MAAM,CAACC,GAAR,CAHZ;AAIE,IAAA,UAAWkD,KAAD,IAAW6Q,WAAW,CAAC,EAAE,GAAGrX,GAAL;OAAWqD,MAAM,CAACC,MAAMkD,KAAK,CAACrF,MAANqF,CAAa1D;AAArC,KAAD,CAJlC;AAKE,IAAA,QAAQ,MAAMsX,OAAO,CAAC,IAAD;AALvB;;;;;"}