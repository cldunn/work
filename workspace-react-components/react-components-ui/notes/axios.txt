https://axios-http.com/docs/intro

API:
	axios.request(config)
	axios.get(url[, config])
	axios.delete(url[, config])
	axios.head(url[, config])
	axios.options(url[, config])
	axios.post(url[, data[, config]])
	axios.put(url[, data[, config]])
	axios.patch(url[, data[, config]])
	NOTE When using the alias methods url, method, and data properties don't need to be specified in config.

config: (https://axios-http.com/docs/req_config)
	{
		url: '/user',  // `url` is the server URL that will be used for the request
		method: 'get', // default, `method` is the request method to be used when making the request
		params: { ID: 12345 },  // `params` are the URL parameters to be sent with the request, plain object, null or undefined are not rendered in the URL
		data: { firstName: 'Fred' },  // data to be sent as the request body, applicable for 'PUT', 'POST', 'DELETE , and 'PATCH'
		headers: {'X-Requested-With': 'XMLHttpRequest'},  // `headers` are custom headers to be sent
		responseType: 'json', // default, indicates the type of data that the server will respond with
		...
	}

interceptors
	You can intercept requests or responses before they are handled by then or catch
	
	axios.interceptors.request.use(
		function (config) {
			...
			return config;
		}, 
		function (error) {
			...
			return Promise.reject(error);
		}
	);
	
	axios.interceptors.response.use(
		function (response) {  // Any status code that lie within the range of 2xx cause this function to trigger
			...
			return response;
		}, 
		function (error) { // Any status codes that falls outside the range of 2xx cause this function to trigger
     		...
			return Promise.reject(error);
		}
	);